{"entries":[{"timestamp":1737111363902,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":70,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//% color=\"#00CC00\" icon=\"\\u2B88\"\n//% block=\"XGO Lite\"\n//% block.loc.nl=\"XGO Lite\"\nnamespace CXgoRider {\n\n    export type gamepadHandler = () => void\n\n    export enum Button {\n        //% block=\"black-top\"\n        //% block.loc.nl=\"zwart-boven\"\n        Button1,\n        //% block=\"black-bottom\"\n        //% block.loc.nl=\"zwart-onder\"\n        Button2,\n        //% block=\"black-left\"\n        //% block.loc.nl=\"zwart-links\"\n        Button3,\n        //% block=\"black-right\"\n        //% block.loc.nl=\"zwart-rechts\"\n        Button4,\n        //% block=\"white-top\"\n        //% block.loc.nl=\"wit-boven\"\n        Button5,\n        //% block=\"white-bottom\"\n        //% block.loc.nl=\"wit-onder\"\n        Button6,\n        //% block=\"white-left\"\n        //% block.loc.nl=\"wit-links\"\n        Button7,\n        //% block=\"white-right\"\n        //% block.loc.nl=\"wit-rechts\"\n        Button8,\n        //% block=\"yellow-top\"\n        //% block.loc.nl=\"geel-boven\"\n        Button9,\n        //% block=\"yellow-bottom\"\n        //% block.loc.nl=\"geel-onder\"\n        Button10,\n        //% block=\"blue\"\n        //% block.loc.nl=\"blauw\"\n        Button11,\n        //% block=\"red\"\n        //% block.loc.nl=\"rood\"\n        Button12\n    }\n\n    let EventGamepad1: gamepadHandler\n    let EventGamepad2: gamepadHandler\n    let EventGamepad3: gamepadHandler\n    let EventGamepad4: gamepadHandler\n    let EventGamepad5: gamepadHandler\n    let EventGamepad6: gamepadHandler\n    let EventGamepad7: gamepadHandler\n    let EventGamepad8: gamepadHandler\n    let EventGamepad9: gamepadHandler\n    let EventGamepad10: gamepadHandler\n    let EventGamepad11: gamepadHandler\n    let EventGamepad12: gamepadHandler\n\n    export enum Group {\n        //% block=\"group 1\"\n        //% block.loc.nl=\"groep 1\"\n        Group1,\n        //% block=\"group 2\"\n        //% block.loc.nl=\"groep 2\"\n        Group2,\n        //% block=\"group 3\"\n        //% block.loc.nl=\"groep 3\"\n        Group3,\n        //% block=\"group 4\"\n        //% block.loc.nl=\"groep 4\"\n        Group4,\n        //% block=\"group 5\"\n        //% block.loc.nl=\"groep 5\"\n        Group5,\n        //% block=\"group 6\"\n        //% block.loc.nl=\"groep 6\"\n        Group6,\n        //% block=\"group 7\"\n        //% block.loc.nl=\"groep 7\"\n        Group7,\n        //% block=\"group 8\"\n        //% block.loc.nl=\"groep 8\"\n        Group8,\n        //% block=\"group 9\"\n        //% block.loc.nl=\"groep 9\"\n        Group9\n    }\n\n    let GROUP = 0\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":2422,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":236,"start2":236,"length1":32,"length2":31}]}]},{"timestamp":1737111568487,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ider {\n\n"],[1,"    export type gamepadHandler = () => void\n\n    export enum Button {\n        //% block=\"black-top\"\n        //% block.loc.nl=\"zwart-boven\"\n        Button1,\n        //% block=\"black-bottom\"\n        //% block.loc.nl=\"zwart-onder\"\n        Button2,\n        //% block=\"black-left\"\n        //% block.loc.nl=\"zwart-links\"\n        Button3,\n        //% block=\"black-right\"\n        //% block.loc.nl=\"zwart-rechts\"\n        Button4,\n        //% block=\"white-top\"\n        //% block.loc.nl=\"wit-boven\"\n        Button5,\n        //% block=\"white-bottom\"\n        //% block.loc.nl=\"wit-onder\"\n        Button6,\n        //% block=\"white-left\"\n        //% block.loc.nl=\"wit-links\"\n        Button7,\n        //% block=\"white-right\"\n        //% block.loc.nl=\"wit-rechts\"\n        Button8,\n        //% block=\"yellow-top\"\n        //% block.loc.nl=\"geel-boven\"\n        Button9,\n        //% block=\"yellow-bottom\"\n        //% block.loc.nl=\"geel-onder\"\n        Button10,\n        //% block=\"blue\"\n        //% block.loc.nl=\"blauw\"\n        Button11,\n        //% block=\"red\"\n        //% block.loc.nl=\"rood\"\n        Button12\n    }\n\n    let EventGamepad1: gamepadHandler\n    let EventGamepad2: gamepadHandler\n    let EventGamepad3: gamepadHandler\n    let EventGamepad4: gamepadHandler\n    let EventGamepad5: gamepadHandler\n    let EventGamepad6: gamepadHandler\n    let EventGamepad7: gamepadHandler\n    let EventGamepad8: gamepadHandler\n    let EventGamepad9: gamepadHandler\n    let EventGamepad10: gamepadHandler\n    let EventGamepad11: gamepadHandler\n    let EventGamepad12: gamepadHandler\n\n    export enum Group {\n        //% block=\"group 1\"\n        //% block.loc.nl=\"groep 1\"\n        Group1,\n        //% block=\"group 2\"\n        //% block.loc.nl=\"groep 2\"\n        Group2,\n        //% block=\"group 3\"\n        //% block.loc.nl=\"groep 3\"\n        Group3,\n        //% block=\"group 4\"\n        //% block.loc.nl=\"groep 4\"\n        Group4,\n        //% block=\"group 5\"\n        //% block.loc.nl=\"groep 5\"\n        Group5,\n        //% block=\"group 6\"\n        //% block.loc.nl=\"groep 6\"\n        Group6,\n        //% block=\"group 7\"\n        //% block.loc.nl=\"groep 7\"\n        Group7,\n        //% block=\"group 8\"\n        //% block.loc.nl=\"groep 8\"\n        Group8,\n        //% block=\"group 9\"\n        //% block.loc.nl=\"groep 9\"\n        Group9\n    }\n\n    let GROUP = 0\n"],[0,"}"]],"start1":98,"start2":98,"length1":9,"length2":2324}]}]},{"timestamp":1737229681448,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," {\n\n"],[-1,"    xgo.init_xgo_serial(SerialPin.P14, SerialPin.P13)\n\n    //////////////\n    // MESSAGES //\n    //////////////\n\n    // The XGo is programmed by means of messages.\n    // The available messages are enumerated in 'Message'\n    // and are executed by the routine 'handleMessage'.\n    // This is the case for stand alone programming and\n    // the programming of a group of XGo's.\n    // The handling of messages by a single routine garantees\n    // that leader and follower XGo's act exactly identical.\n\n    enum Message {\n\n        Stop,           // stops the walking\n        Wait,           // suspend the program for the specified time\n        Pause,          // pause the program until Message.Continue\n        Continue,       // continue the program after Message.Pause\n\n        FastWave,       // execute next message in a wave\n        NormalWave,\n        SlowWave,\n\n        Action,         // perform a standard action\n        Activity,       // inform follower to perform a numbered activity\n\n        Forward,        // move in the specified direction\n        Backward,\n        Left,\n        Right,\n\n        SetSpeed,       // set the speed between 0 and 100 %\n        SpeedUp,        // speeding up by 10 %\n        SlowDown,       // slowing down by 10 %\n\n        TurnLeft,       // turn as a continuous rotation\n        TurnRight,      // the rotation will be stopped by\n        TurnOff,        // a movement message or the stop message\n\n        ArmHigh,        // X:40, Z:90\n        ArmFront,       // X:70, Z:80\n        ArmLow,         // X:90, Z:50\n        ArmFloor,       // X:80, Z:10\n\n        ClampOpen,      // open the clamp to position CLAMPOPEN\n        ClampClose,     // close the clamp to position CLAMPCLOSED\n\n        Stand,          // perform an XGo standard action\n        Prone,\n        Sit,\n        Swing,\n        Greet,\n        Roll,\n        Whirl,\n        Crawl,\n        Stretch,\n        Squat,\n        Pee\n    }\n\n    let MESSAGE: number = -1\n    let ACTIVITY: number = 0\n    let PAUSE: boolean = false\n\n    ///////////////////////\n    // A STAND ALONE XGO //\n    ///////////////////////\n\n    // The routine 'setPlayer' is called with parameter\n    // 'Player.Alone'.\n\n    //////////////////////////////\n    // SEVERAL XGO'S IN A GROUP //\n    //////////////////////////////\n\n    // A group consists of one leader and several followers.\n\n    // A follower needs not to be programmed as it receives\n    // instructions from the leader.\n    // Followers only need to be initialized by three blocks:\n    // - setGroup, specifying the group it is committed to.\n    // - setPosition, specifying the position within the group.\n    // The position in the group determines the waiting time\n    // when an instruction must be performed in 'wave'-mode.\n\n    // On the other hand, a follower may be programmed, even\n    // if it belongs to a group. To avoid mixed activity by\n    // the own and received instructions, a leader should\n    // call 'pauseFollowers' before sending messages and\n    // call 'continueFollowers' when done.\n\n    // The leader must be initialized too and\n    // will be programmed. \n    // - setGroup, specifying the group it is committed to.\n\n    export enum Position {\n        //% block=\"position 1\"\n        //% block.loc.nl=\"positie 1\"\n        Position1,\n        //% block=\"position 2\"\n        //% block.loc.nl=\"positie 2\"\n        Position2,\n        //% block=\"position 3\"\n        //% block.loc.nl=\"positie 3\"\n        Position3,\n        //% block=\"position 4\"\n        //% block.loc.nl=\"positie 4\"\n        Position4,\n        //% block=\"position 5\"\n        //% block.loc.nl=\"positie 5\"\n        Position5,\n        //% block=\"position 6\"\n        //% block.loc.nl=\"positie 6\"\n        Position6,\n        //% block=\"position 7\"\n        //% block.loc.nl=\"positie 7\"\n        Position7,\n        //% block=\"position 8\"\n        //% block.loc.nl=\"positie 8\"\n        Position8,\n        //% block=\"position 9\"\n        //% block.loc.nl=\"positie 9\"\n        Position9\n    }\n\n    export enum Wave {\n        //% block=\"slow\"\n        //% block.loc.nl=\"langzame\"\n        Slow,\n        //% block=\"normal\"\n        //% block.loc.nl=\"gewone\"\n        Normal,\n        //% block=\"fast\"\n        //% block.loc.nl=\"snelle\"\n        Fast\n    }\n\n    let POSITION: number = 0 // leader\n    let WAVE: number = 0\n\n    /////////////////////////\n    // CONTROLLING THE XGO //\n    /////////////////////////\n\n    export enum Movement {\n        //% block=\"forward\"\"\n        //% block.loc.nl=\"vooruit\"\n        Forward,\n        //% block=\"backward\"\n        //% block.loc.nl=\"achteruit\"\n        Backward,\n        //% block=\"to the left\"\n        //% block.loc.nl=\"naar links\"\n        Left,\n        //% block=\"to the right\"\n        //% block.loc.nl=\"naar rechts\"\n        Right\n    }\n\n    export enum Rotation {\n        //% block=\"to the left\"\n        //% block.loc.nl=\"naar links\"\n        TurnLeft,\n        //% block=\"to the right\"\n        //% block.loc.nl=\"naar rechts\"\n        TurnRight,\n        //% block=\"30 deg to the left\"\n        //% block.loc.nl=\"30 gr naar links\"\n        RotateLeft,\n        //% block=\"30 deg to the right\"\n        //% block.loc.nl=\"30 gr naar rechts\"\n        RotateRight\n    }\n\n    export enum ArmPosition {\n        //% block=\"high up\"\"\n        //% block.loc.nl=\"ver omhoog\"\n        High, // X:40,Z90\n        //% block=\"straight to the front\"\n        //% block.loc.nl=\"recht naar voren\"\n        Front, // X:70,Z:80\n        //% block=\"low to the front\"\n        //% block.loc.nl=\"laag naar voren\"\n        Low, // X:90,Z:50\n        //% block=\"to the floor\"\n        //% block.loc.nl=\"naar de vloer\"\n        Floor // X:80,Z:10\n    }\n\n    export enum ClampState {\n        //% block=\"close\"\n        //% block.loc.nl=\"sluit\"\n        Close,\n        //% block=\"open\"\n        //% block.loc.nl=\"open\"\n        Open\n    }\n\n    let MOVEMENT: number = Message.Stop // the latest movement message\n\n    // Speed range:\n    // ------------\n    // Value: 0 to 100 (in %)\n    // Message: 1000 to 1100\n    let SPEED: number = 50\n\n    // Clamp range\n    // -----------\n    // Minimum value: 0 (equal to 53.0 mm)\n    // Maximum value: 255 (equal to 22.5 mm)\n    let CLAMPCLOSED: number = 255\n    let CLAMPOPEN: number = 0\n\n    export enum Action {\n        //% block=\"stand up\"\n        //% block.loc.nl=\"staan\"\n        Stand,\n        //% block=\"lay down\"\n        //% block.loc.nl=\"liggen\"\n        Prone,\n        //% block=\"swing\"\n        //% block.loc.nl=\"swingen\"\n        Swing,\n        //% block=\"greet\"\n        //% block.loc.nl=\"groeten\"\n        Greet,\n        //% block=\"roll\"\n        //% block.loc.nl=\"schudden\"\n        Roll,\n        //% block=\"whirl\"\n        //% block.loc.nl=\"wervelen\"\n        Whirl,\n        //% block=\"crawl\"\n        //% block.loc.nl=\"besluipen\"\n        Crawl,\n        //% block=\"stretch\"\n        //% block.loc.nl=\"uitrekken\"\n        Stretch,\n        //% block=\"squat\"\n        //% block.loc.nl=\"hurken\"\n        Squat,\n        //% block=\"pee\"\n        //% block.loc.nl=\"plassen\"\n        Pee\n    }\n\n    ///////////////////////////////\n    // MESSAGE HANDLING ROUTINES //\n    ///////////////////////////////\n\n    function stopMoving() {\n        xgo.move_xgo(xgo.direction_enum.Forward, 0)\n        xgo.move_xgo(xgo.direction_enum.Left, 0)\n        xgo.rotate(xgo.rotate_enum.Left, 0)\n    }\n\n    function handleMessage() {\n\n        // A leader sends its movements to the followers\n        if (!POSITION)\n            radio.sendNumber(MESSAGE)\n\n        // Instead of 'Message.Wait', this message is submitted by\n        // the calculated value of '10000 + wait time'.\n        let wait = 0\n        if (MESSAGE >= 10000) {\n            wait = MESSAGE - 10000\n            MESSAGE = Message.Wait\n        }\n\n        // Instead of 'Message.Speed', this message is submitted by\n        // the calculated value of '1000 + required speed'.\n        if (MESSAGE >= 1000) {\n            SPEED = MESSAGE - 1000\n            // reactivate the latest movement message\n            MESSAGE = MOVEMENT\n        }\n\n        // Instead of 'Message.Activity', this message is submitted by\n        // the calculated value of '500 + required activity'.\n        if (MESSAGE >= 500) {\n            ACTIVITY = MESSAGE - 500\n            MESSAGE = Message.Activity\n        }\n\n        // The messages 'Message.FastWave', 'Message.NormalWave'\n        // and 'Message.SlowWave' only set the WAVE variable\n        // depending on the follower's position.\n        // Afterwards, WAVE is used to pause before the\n        // execution of the next message to create the wave effect.\n        // Message.Stop however is excluded from the wave behaviour.\n        if (WAVE > 0 && MESSAGE != Message.Stop) {\n            basic.pause(WAVE * 1000)\n            WAVE = 0\n        }\n\n        switch (MESSAGE) {\n            case Message.Stop:\n                stopMoving()\n                break\n            case Message.Wait:\n                basic.pause(wait * 1000)\n                break\n            case Message.Pause:\n                PAUSE = true\n                stopMoving()\n                break\n            case Message.Continue:\n                PAUSE = false\n                break\n            case Message.FastWave:\n                WAVE = (POSITION - 1) * 0.3\n                break\n            case Message.NormalWave:\n                WAVE = (POSITION - 1) * 0.5\n                break\n            case Message.SlowWave:\n                WAVE = (POSITION - 1) * 1.0\n                break\n            //\n            // XGO MOVEMENT CONTROL\n            //\n            case Message.Forward:\n                MOVEMENT = Message.Forward\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                xgo.move_xgo(xgo.direction_enum.Forward, SPEED)\n                break\n            case Message.Backward:\n                MOVEMENT = Message.Backward\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                xgo.move_xgo(xgo.direction_enum.Backward, SPEED)\n                break\n            case Message.Left:\n                MOVEMENT = Message.Left\n                // left and right seem to have switched\n                xgo.move_xgo(xgo.direction_enum.Right, SPEED)\n                break\n            case Message.Right:\n                MOVEMENT = Message.Right\n                // left and right seem to have switched\n                xgo.move_xgo(xgo.direction_enum.Left, SPEED)\n                break\n            case Message.TurnLeft:\n                MOVEMENT = Message.TurnLeft\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 100)\n                break\n            case Message.TurnRight:\n                MOVEMENT = Message.TurnRight\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Right, 100)\n                break\n            case Message.TurnOff:\n                MOVEMENT = Message.TurnOff\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                break\n            case Message.SpeedUp:\n                SPEED += 10\n                if (SPEED > 100) SPEED = 100\n                // call handleMessage recursively to activate the speed\n                MESSAGE = MOVEMENT\n                handleMessage()\n                break\n            case Message.SlowDown:\n                SPEED -= 10\n                if (SPEED < 0) SPEED = 0\n                // call handleMessage recursively to activate the speed\n                MESSAGE = MOVEMENT\n                handleMessage()\n                break\n            //\n            // XGO ARM CONTROL\n            //\n            case Message.ArmHigh:\n                xgo.Manipulator_clampX(40)\n                xgo.Manipulator_clampZ(90)\n                break\n            case Message.ArmFront:\n                xgo.Manipulator_clampX(70)\n                xgo.Manipulator_clampZ(80)\n                break\n            case Message.ArmLow:\n                xgo.Manipulator_clampX(90)\n                xgo.Manipulator_clampZ(50)\n                break\n            case Message.ArmFloor:\n                xgo.Manipulator_clampX(80)\n                xgo.Manipulator_clampZ(10)\n                break\n            case Message.ClampClose:\n                xgo.Manipulator_clamp(CLAMPCLOSED)\n                break\n            case Message.ClampOpen:\n                xgo.Manipulator_clamp(CLAMPOPEN)\n                break\n            //\n            // XGO STANDARD ACTIONS\n            //\n            case Message.Stand: xgo.execution_action(xgo.action_enum.Default_posture); break;\n            case Message.Prone: xgo.body_height(0); xgo.servo_switch(xgo.servo_switch_enum.Unload); break;\n            case Message.Sit: xgo.execution_action(xgo.action_enum.Sit_down); break;\n            case Message.Pee: xgo.execution_action(xgo.action_enum.Pee); break;\n            case Message.Swing: xgo.execution_action(xgo.action_enum.Play_pendulum); break;\n            case Message.Greet: xgo.execution_action(xgo.action_enum.Wave); break;\n            case Message.Roll: xgo.execution_action(xgo.action_enum.Twirl_Roll); break;\n            case Message.Whirl: xgo.execution_action(xgo.action_enum.Whirl); break;\n            case Message.Crawl: xgo.execution_action(xgo.action_enum.Crawl_forward); break;\n            case Message.Stretch: xgo.execution_action(xgo.action_enum.Stretch_oneself); break;\n            case Message.Squat: xgo.execution_action(xgo.action_enum.Squat); break;\n            //\n            // NO NEED TO HANDLE Message.Activity HERE\n            //\n        }\n        MESSAGE = -1\n    }\n\n    function playerID(): void {\n        if (POSITION) {\n            basic.showString(\"P\")\n            basic.showNumber(POSITION)\n        }\n        else\n            basic.showString(\"L\")\n        basic.showIcon(IconNames.Happy)\n    }\n\n    input.onLogoEvent(TouchButtonEvent.Pressed, function () {\n        playerID()\n    })\n\n    ////////////////////////\n    // PROGRAMMING BLOCKS //\n    ////////////////////////\n\n    //% block=\"position\"\n    //% block.loc.nl=\"positie\"\n    export function position(): number {\n        return POSITION\n    }\n\n    //% block=\"follow at %pos\"\n    //% block.loc.nl=\"volg op %pos\"\n    export function setPosition(pos: Position) {\n        POSITION = pos + 1\n    }\n\n    //% block=\"position %player\"\n    //% block.loc.nl=\"positie %player\"\n    export function isPosition(): number {\n        return POSITION\n    }\n\n    //% block=\"continue follower programs\"\n    //% block.loc.nl=\"hervat volger-programma's\"\n    export function continueFollowers() {\n        radio.sendNumber(Message.Continue)\n    }\n\n    //% block=\"suspend follower programs\"\n    //% block.loc.nl=\"onderbreek volger-programma's\"\n    export function pauseFollowers() {\n        radio.sendNumber(Message.Pause)\n    }\n\n    //% block=\"do a %wave wave\"\n    //% block.loc.nl=\"maak een %wave wave\"\n    export function setWave(wave: Wave) {\n        switch (wave) {\n            case Wave.Slow: MESSAGE = Message.SlowWave; break;\n            case Wave.Normal: MESSAGE = Message.NormalWave; break;\n            case Wave.Fast: MESSAGE = Message.FastWave; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"activity\"\n    //% block.loc.nl=\"activiteit\"\n    export function activity(): number {\n        return ACTIVITY\n    }\n\n    //% block=\"activity %activity\"\n    //% block.loc.nl=\"activiteit %activity\"\n    //% activity.min=1 activity.max=100 activity.defl=1\n    export function isActivity(activity: number): boolean {\n        if (ACTIVITY == activity) {\n            ACTIVITY = 0\n            return true\n        }\n        return false\n    }\n\n    //% block=\"perform activity %activity\"\n    //% block.loc.nl=\"doe activiteit %activity\"\n    //% activity.min=1 activity.max=100 activity.defl=1\n    export function performActivity(activity: number) {\n        MESSAGE = 500 + activity;\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"perform the %action\"\n    //% block.loc.nl=\"ga %action\"\n    export function performAction(action: Action) {\n        switch (action) {\n            case Action.Stand: MESSAGE = Message.Stand; break;\n            case Action.Prone: MESSAGE = Message.Prone; break;\n            case Action.Swing: MESSAGE = Message.Swing; break;\n            case Action.Greet: MESSAGE = Message.Greet; break;\n            case Action.Roll: MESSAGE = Message.Roll; break;\n            case Action.Whirl: MESSAGE = Message.Whirl; break;\n            case Action.Crawl: MESSAGE = Message.Crawl; break;\n            case Action.Stretch: MESSAGE = Message.Stretch; break;\n            case Action.Squat: MESSAGE = Message.Squat; break;\n            case Action.Pee: MESSAGE = Message.Pee; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"clamp size: closes to %closed mm and opens to %open mm width\"\n    //% block.loc.nl=\"grijper afmeting: sluit tot %closed mm en opent tot %open mm breedte\"\n    //% closed.min=25 closed.max=50.0 closed.defl=25\n    //% open.min=25 open.max=50.0 open.defl=50\n    // The motor takes a value range of 255 (closed) to 0 (open).\n    // The input in mm should be multiplied by (255-0)/(50-25) therefore.\n    export function setClampRange(closed: number, open: number) {\n        closed = (closed - 25) * 10.2\n        open = (open - 25) * 10.2\n        if (open > closed) {\n            // input was inverted\n            let n = closed\n            closed = open\n            open = n\n        }\n        CLAMPOPEN = open\n        CLAMPCLOSED = closed\n    }\n\n    //% block=\"%state the clamp\"\n    //% block.loc.nl=\"%state de grijper\"\n    export function clamp(state: ClampState) {\n        switch (state) {\n            case ClampState.Open: MESSAGE = Message.ClampOpen; break;\n            case ClampState.Close: MESSAGE = Message.ClampClose; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"move the arm %move\"\n    //% block.loc.nl=\"beweeg de arm %move\"\n    export function moveArm(position: ArmPosition) {\n        switch (position) {\n            case ArmPosition.High: MESSAGE = Message.ArmHigh; break;\n            case ArmPosition.Front: MESSAGE = Message.ArmFront; break;\n            case ArmPosition.Low: MESSAGE = Message.ArmLow; break;\n            case ArmPosition.Floor: MESSAGE = Message.ArmFloor; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"turn %rotation\"\n    //% block.loc.nl=\"draai %rotation\"\n    export function turn(rotation: Rotation) {\n        switch (rotation) {\n            case Rotation.TurnLeft: MESSAGE = Message.TurnLeft; break;\n            case Rotation.TurnRight: MESSAGE = Message.TurnRight; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"walk %movement\"\n    //% block.loc.nl=\"loop %movement\"\n    export function move(movement: Movement) {\n        switch (movement) {\n            case Movement.Forward: MESSAGE = Message.Forward; break;\n            case Movement.Backward: MESSAGE = Message.Backward; break;\n            case Movement.Left: MESSAGE = Message.Left; break;\n            case Movement.Right: MESSAGE = Message.Right; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"set speed to %speed \\\\%\"\n    //% block.loc.nl=\"stel de snelheid in op %speed \\\\%\"\n    //% speed.min=0 speed.max=100 speed.defl=50\n    export function setSpeed(speed: number) {\n        MESSAGE = 1000 + speed;\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"stop\"\n    //% block.loc.nl=\"stop\"\n    export function stop() {\n        MESSAGE = Message.Stop\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"a number from %min upto %max\"\n    //% block.loc.nl=\"een getal van %min t/m %max\"\n    //% max.defl=10\n    export function randomInt(min: number, max: number): number {\n        let i = 0\n        if (min > max) {\n            i = min\n            min = max\n            max = i\n        }\n        i = max - min + 1\n        i = min + Math.floor(Math.random() * i)\n        return i\n    }\n\n    //% block=\"wait %time sec\"\n    //% block.loc.nl=\"wacht %time sec\"\n    //% min.defl=1\n    export function wait(time: number) {\n        MESSAGE = 10000 + time\n        if (!PAUSE) handleMessage()\n    }\n\n    //% color=\"#008800\"\n    //% block=\"comment: %dummy\"\n    //% block.loc.nl=\"uitleg: %dummy\"\n    //% min.defl=\"schrijf hier je uitleg\"\n    export function comment(dummy: string) {\n    }\n\n"],[0,"}"]],"start1":102,"start2":102,"length1":20367,"length2":5}]}]},{"timestamp":1737229725833,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"init"],[-1,"XGOS"],[1,"_xgo_s"],[0,"eria"]],"start1":114,"start2":114,"length1":12,"length2":14},{"diffs":[[0,"op message\n\n"],[1,"        ArmHigh,        // X:40, Z:90\n        ArmFront,       // X:70, Z:80\n        ArmLow,         // X:90, Z:50\n        ArmFloor,       // X:80, Z:10\n\n        ClampOpen,      // open the clamp to position CLAMPOPEN\n        ClampClose,     // close the clamp to position CLAMPCLOSED\n\n"],[0,"        Stan"]],"start1":1540,"start2":1540,"length1":24,"length2":309},{"diffs":[[0,"////"],[-1,"///////\n    // SEVERAL XGO'S IN A GROUP //\n    //////////////////////////////\n\n    // In a group a rider should call:\n    // - setGroup, specifying the group it is committed to.\n    // - setPosition, specifying the position within the group.\n    // The position in the group determines the waiting time\n    // when an instruction must be performed in 'wave'-mode"],[1,"\n    // A STAND ALONE XGO //\n    ///////////////////////\n\n    // The routine 'setPlayer' is called with parameter\n    // 'Player.Alone'.\n\n    //////////////////////////////\n    // SEVERAL XGO'S IN A GROUP //\n    //////////////////////////////\n\n    // A group consists of one leader and several followers.\n\n    // A follower needs not to be programmed as it receives\n    // instructions from the leader.\n    // Followers only need to be initialized by three blocks:\n    // - setGroup, specifying the group it is committed to.\n    // - setPosition, specifying the position within the group.\n    // The position in the group determines the waiting time\n    // when an instruction must be performed in 'wave'-mode.\n\n    // On the other hand, a follower may be programmed, even\n    // if it belongs to a group. To avoid mixed activity by\n    // the own and received instructions, a leader should\n    // call 'pauseFollowers' before sending messages and\n    // call 'continueFollowers' when done.\n\n    // The leader must be initialized too and\n    // will be programmed. \n    // - setGroup, specifying the group it is committed to"],[0,".\n\n "]],"start1":2161,"start2":2161,"length1":370,"length2":1132}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"XGO\": \"github:elecfreaks/xgo-rider#v1.5.5\""],[0,"\n   "]],"start1":139,"start2":139,"length1":61,"length2":8}]}]},{"timestamp":1737229901553,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"essage'."],[1,"\n    // This is the case for stand alone programming and\n    // the programming of a group of XGo's.\n    // The handling of messages by a single routine garantees\n    // that leader and follower XGo's act exactly identical."],[0,"\n\n    en"]],"start1":373,"start2":373,"length1":16,"length2":239}]}]},{"timestamp":1737231270931,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"d action"],[1,"\n        Activity,       // inform follower to perform a numbered activity"],[0,"\n\n      "]],"start1":796,"start2":796,"length1":16,"length2":90}]}]},{"timestamp":1737231309954,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"number = -1\n"],[1,"    let ACTIVITY: number = 0\n"],[0,"    let PAUS"]],"start1":1481,"start2":1481,"length1":24,"length2":53},{"diffs":[[0,"ateRight\n    }\n\n"],[1,"    export enum ArmPosition {\n        //% block=\"high up\"\"\n        //% block.loc.nl=\"ver omhoog\"\n        High, // X:40,Z90\n        //% block=\"straight to the front\"\n        //% block.loc.nl=\"recht naar voren\"\n        Front, // X:70,Z:80\n        //% block=\"low to the front\"\n        //% block.loc.nl=\"laag naar voren\"\n        Low, // X:90,Z:50\n        //% block=\"to the floor\"\n        //% block.loc.nl=\"naar de vloer\"\n        Floor // X:80,Z:10\n    }\n\n    export enum ClampState {\n        //% block=\"close\"\n        //% block.loc.nl=\"sluit\"\n        Close,\n        //% block=\"open\"\n        //% block.loc.nl=\"open\"\n        Open\n    }\n\n"],[0,"    let MOVEMENT"]],"start1":3946,"start2":3946,"length1":32,"length2":663},{"diffs":[[0,"r = 50\n\n"],[1,"    // Clamp range\n    // -----------\n    // Minimum value: 0 (equal to 53.0 mm)\n    // Maximum value: 255 (equal to 22.5 mm)\n    let CLAMPCLOSED: number = 255\n    let CLAMPOPEN: number = 0\n\n"],[0,"    expo"]],"start1":4784,"start2":4784,"length1":16,"length2":207},{"diffs":[[0,"MENT\n        }\n\n"],[1,"        // Instead of 'Message.Activity', this message is submitted by\n        // the calculated value of '500 + required activity'.\n        if (MESSAGE >= 500) {\n            ACTIVITY = MESSAGE - 500\n            MESSAGE = Message.Activity\n        }\n\n"],[0,"        // The m"]],"start1":6751,"start2":6751,"length1":32,"length2":282},{"diffs":[[0,"ion "],[-1,"showPosition(): void {\n        basic.showString(\"P\" + POSITION.toString()"],[1,"playerID(): void {\n        if (POSITION) {\n            basic.showString(\"P\")\n            basic.showNumber(POSITION)\n        }\n        else\n            basic.showString(\"L\")\n        basic.showIcon(IconNames.Happy"],[0,")\n  "]],"start1":12389,"start2":12389,"length1":81,"length2":219},{"diffs":[[0,"    "],[-1,"showPosition"],[1,"playerID"],[0,"()\n "]],"start1":12679,"start2":12679,"length1":20,"length2":16},{"diffs":[[0,"POSITION\n    }\n\n"],[1,"    //% block=\"continue follower programs\"\n    //% block.loc.nl=\"hervat volger-programma's\"\n    export function continueFollowers() {\n        radio.sendNumber(Message.Continue)\n    }\n\n    //% block=\"suspend follower programs\"\n    //% block.loc.nl=\"onderbreek volger-programma's\"\n    export function pauseFollowers() {\n        radio.sendNumber(Message.Pause)\n    }\n\n"],[0,"    //% block=\"d"]],"start1":13198,"start2":13198,"length1":32,"length2":397},{"diffs":[[0,"essage()\n    }\n\n"],[1,"    //% block=\"activity\"\n    //% block.loc.nl=\"activiteit\"\n    export function activity(): number {\n        return ACTIVITY\n    }\n\n    //% block=\"activity %activity\"\n    //% block.loc.nl=\"activiteit %activity\"\n    //% activity.min=1 activity.max=100 activity.defl=1\n    export function isActivity(activity: number): boolean {\n        if (ACTIVITY == activity) {\n            ACTIVITY = 0\n            return true\n        }\n        return false\n    }\n\n    //% block=\"perform activity %activity\"\n    //% block.loc.nl=\"doe activiteit %activity\"\n    //% activity.min=1 activity.max=100 activity.defl=1\n    export function performActivity(activity: number) {\n        MESSAGE = 500 + activity;\n        if (!PAUSE) handleMessage()\n    }\n\n"],[0,"    //% block=\"p"]],"start1":13950,"start2":13950,"length1":32,"length2":761},{"diffs":[[0,"essage()\n    }\n\n"],[1,"    //% block=\"clamp size: closes to %closed mm and opens to %open mm width\"\n    //% block.loc.nl=\"grijper afmeting: sluit tot %closed mm en opent tot %open mm breedte\"\n    //% closed.min=25 closed.max=50.0 closed.defl=25\n    //% open.min=25 open.max=50.0 open.defl=50\n    // The motor takes a value range of 255 (closed) to 0 (open).\n    // The input in mm should be multiplied by (255-0)/(50-25) therefore.\n    export function setClampRange(closed: number, open: number) {\n        closed = (closed - 25) * 10.2\n        open = (open - 25) * 10.2\n        if (open > closed) {\n            // input was inverted\n            let n = closed\n            closed = open\n            open = n\n        }\n        CLAMPOPEN = open\n        CLAMPCLOSED = closed\n    }\n\n    //% block=\"%state the clamp\"\n    //% block.loc.nl=\"%state de grijper\"\n    export function clamp(state: ClampState) {\n        switch (state) {\n            case ClampState.Open: MESSAGE = Message.ClampOpen; break;\n            case ClampState.Close: MESSAGE = Message.ClampClose; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"move the arm %move\"\n    //% block.loc.nl=\"beweeg de arm %move\"\n    export function moveArm(position: ArmPosition) {\n        switch (position) {\n            case ArmPosition.High: MESSAGE = Message.ArmHigh; break;\n            case ArmPosition.Front: MESSAGE = Message.ArmFront; break;\n            case ArmPosition.Low: MESSAGE = Message.ArmLow; break;\n            case ArmPosition.Floor: MESSAGE = Message.ArmFloor; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n"],[0,"    //% block=\"t"]],"start1":15508,"start2":15508,"length1":32,"length2":1618}]}]},{"timestamp":1737231517070,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"n.P13)\n\n"],[-1,"\n"],[0,"    ////"]],"start1":151,"start2":151,"length1":17,"length2":16}]}]},{"timestamp":1737236445610,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,")\n\n\n"],[-1,"    function writeCommand(len: number, addr: number, data: number, wait: number) {\n\n        let commands_buffer = pins.createBuffer(len)\n        commands_buffer[0] = headDataH\n        commands_buffer[1] = headDataL\n        commands_buffer[2] = len\n        commands_buffer[3] = 0x00\n        commands_buffer[4] = addr\n        commands_buffer[5] = data\n        commands_buffer[6] = ~(len + 0x00 + addr + data)\n        commands_buffer[7] = tailDataH\n        commands_buffer[8] = tailDataL\n        serial.writeBuffer(commands_buffer)\n\n        basic.pause(wait)\n    }\n\n"],[0,"    "]],"start1":156,"start2":156,"length1":571,"length2":8}]}]},{"timestamp":1737236447076,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"let headData = 0x5500\n    let tailData = 0x00AA\n    let headDataH = (headData >> 8) & 0xff;\n    let headDataL = (headData >> 0) & 0xff;\n    let tailDataH = (tailData >> 8) & 0xff;\n    let tailDataL = (tailData >> 0) & 0xff;"],[1,"xgo.initXGOSerial(SerialPin.P14, SerialPin.P13)\n"],[0,"\n\n  "]],"start1":106,"start2":106,"length1":231,"length2":56},{"diffs":[[0,"r, data:"],[1," number, wait:"],[0," number)"]],"start1":210,"start2":210,"length1":16,"length2":30},{"diffs":[[0,"er)\n"],[-1,"    }\n\n    function readCommand(len: number, addr: number, readlen: number) {\n\n        let commands_buffer = pins.createBuffer(len)\n        commands_buffer[0] = headDataH\n        commands_buffer[1] = headDataL\n        commands_buffer[2] = len\n        commands_buffer[3] = 0x02\n        commands_buffer[4] = addr\n        commands_buffer[5] = readlen\n        commands_buffer[6] = ~(len + 0x02 + addr + readlen)\n        commands_buffer[7] = tailDataH\n        commands_buffer[8] = tailDataL\n        serial.writeBuffer(commands_buffer)\n        let read_data_buffer = pins.createBuffer(9)\n        read_data_buffer = serial.readBuffer(9)\n        return read_data_buffer[5]\n    }\n\n    function initActionMode() {\n        let statu = readCommand(0x09, 0x02, 0x01)\n        if (statu == 0x00) {\n            return;\n        }\n        writeCommand(0x09, 0x3E, 0xFF)\n        basic.pause(1000)\n    }\n\n    serial.redirect(SerialPin.P14, SerialPin.P13, BaudRate.BaudRate115200)\n    initActionMode()"],[1,"\n        basic.pause(wait)\n    }"],[0,"\n\n  "]],"start1":685,"start2":685,"length1":988,"length2":40}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"ne\": \"*\""],[1,",\n        \"XGO\": \"github:elecfreaks/xgo-rider#v1.5.5\""],[0,"\n    },\n"]],"start1":135,"start2":135,"length1":16,"length2":69}]}]},{"timestamp":1737237046570,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"unction "],[-1,"a"],[1,"initA"],[0,"ctionMod"]],"start1":1527,"start2":1527,"length1":17,"length2":21},{"diffs":[[0,"et statu"],[-1,"s"],[0," = readC"]],"start1":1563,"start2":1563,"length1":17,"length2":16},{"diffs":[[0,"f (statu"],[-1,"s"],[0," == 0x00"]],"start1":1613,"start2":1613,"length1":17,"length2":16},{"diffs":[[0,"00) "],[-1,"return;"],[1,"{"],[0,"\n   "]],"start1":1627,"start2":1627,"length1":15,"length2":9},{"diffs":[[0,"    "],[-1,"writeCommand(0x09, 0x3E, 0xFF)\n        basic.pause(1000)"],[1,"    return;"],[0,"\n    "],[-1,"}\n\n"],[0,"    "],[-1,"function performanceMode() {"],[1,"}"],[0,"\n   "]],"start1":1637,"start2":1637,"length1":104,"length2":29},{"diffs":[[0,", 0x"],[-1,"0"],[0,"3"],[1,"E"],[0,", 0x"],[-1,"00"],[1,"FF"],[0,")\n  "]],"start1":1688,"start2":1688,"length1":16,"length2":16},{"diffs":[[0,"    "],[-1,"actionMode()\n\n    //% group=\"Basic\"\n    //% block=\"Get the current battery level of Rider\"\n    //% weight=470\n    export function batteryStatus(): number {\n        return readCommand(0x09, 0x01, 0x01)\n    }"],[1,"initActionMode()"],[0,"\n\n  "]],"start1":1810,"start2":1810,"length1":214,"length2":24}]}]},{"timestamp":1737237620803,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"data: number) {\n"],[1,"\n"],[0,"        let comm"]],"start1":388,"start2":388,"length1":32,"length2":33},{"diffs":[[0,"dlen: number) {\n"],[1,"\n"],[0,"        let comm"]],"start1":912,"start2":912,"length1":32,"length2":33},{"diffs":[[0,"Mode()\n\n"],[1,"    //% group=\"Basic\"\n"],[0,"    //% "]],"start1":1899,"start2":1899,"length1":16,"length2":38},{"diffs":[[0,"l of Rider\"\n"],[1,"    //% weight=470\n"],[0,"    export f"]],"start1":1972,"start2":1972,"length1":24,"length2":43},{"diffs":[[0,"tus(): number {\n"],[1,""],[0,"        return r"]],"start1":2033,"start2":2033,"length1":32,"length2":32},{"diffs":[[0," }\n\n"],[-1,"    //% block=\"set Rider height %high mm\"\n    //% high.min=-20 high.max=20\n    export function setHeight(height: number) {\n        let data = Math.map(height, -20, 20, 0, 255)\n        writeCommand(0x09, 0x35, data)\n        basic.pause(100)\n    }\n\n    //% block=\"Adjust the left and right tilt of the fuselage %angle °\"\n    //% angle.min=-100 angle.max=100\n    export function setAngle(angle: number) {\n        let data = Math.map(angle, -100, 100, 0, 255)\n        writeCommand(0x09, 0x36, data)\n        basic.pause(100)\n    }\n\n    //% block=\"Move %direct at %speed speed for %time s\"\n    //% speed.min=0 speed.max=100\n    export function moveRider(direct: DirectionEnum, speed: number, time: number) {\n        if (direct == DirectionEnum.Forward)\n            speed = speed\n        else\n            speed = -speed\n        let data = Math.map(speed, -100, 100, 0, 255)\n        writeCommand(0x09, 0x30, data)\n        basic.pause(100)\n    }\n\n"],[0,"    "]],"start1":2097,"start2":2097,"length1":946,"length2":8}]}]},{"timestamp":1737238061673,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," }\n\n"],[-1,"    //% block=\"Set Rider to perform squatting motion with a period of %time s\"\n    //% time.min=2 time.max=4\n    export function squattingFunc(time: number) {\n        time = 4 - time\n        let data = Math.map(time, 0, 2, 1, 255)\n\n\n        writeCommand(0x09, 0x82, data)\n    }\n\n    //% block=\"Set the Rider to shake left and right with a period of %time s\"\n    //% time.min=2 time.max=4\n    export function shufflingFunc(time: number) {\n\n        let len, addr, data, wait\n        len = 0x09\n        addr = 0x39\n\n        time = 4 - time\n        data = Math.map(time, 0, 2, 1, 255)\n\n        wait = 1000\n\n        writeCommand(len, addr, data, wait)\n    }\n\n"],[0,"    "]],"start1":2992,"start2":2992,"length1":662,"length2":8}]}]},{"timestamp":1737238654989,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"()\n\n"],[-1,"    export enum Direction {\n\n        //% block=\"forward\"\n        Forward,\n        //% block=\"backward\"\n        Backward\n    }\n\n"],[0,"    "]],"start1":1901,"start2":1901,"length1":135,"length2":8},{"diffs":[[0,"t: Direction"],[1,"Enum"],[0,", speed: num"]],"start1":2711,"start2":2711,"length1":24,"length2":28},{"diffs":[[0,"irection"],[1,"Enum"],[0,".Forward"]],"start1":2783,"start2":2783,"length1":16,"length2":20},{"diffs":[[0,", 0, 2, 1, 255)\n"],[1,"\n\n"],[0,"        writeCom"]],"start1":3211,"start2":3211,"length1":32,"length2":34},{"diffs":[[0,"time: number) {\n"],[1,"\n        let len, addr, data, wait\n        len = 0x09\n        addr = 0x39\n\n"],[0,"        time = 4"]],"start1":3418,"start2":3418,"length1":32,"length2":107},{"diffs":[[0," - time\n        "],[-1,"let "],[0,"data = Math.map("]],"start1":3525,"start2":3525,"length1":36,"length2":32},{"diffs":[[0,"55)\n"],[-1,"        writeCommand(0x09, 0x39, data"],[1,"\n        wait = 1000\n\n        writeCommand(len, addr, data, wait"],[0,")\n  "]],"start1":3573,"start2":3573,"length1":45,"length2":72},{"diffs":[[0,"ied time"],[1,"\n        Pause,          // pause the program until Message.Continue\n        Continue,       // continue the program after Message.Pause"],[0,"\n\n      "]],"start1":4000,"start2":4000,"length1":16,"length2":152},{"diffs":[[0," TurnOff"],[-1," "],[1,","],[0,"        "]],"start1":4684,"start2":4684,"length1":17,"length2":17},{"diffs":[[0,"stop message"],[1,"\n\n        Stand,          // perform an XGo standard action\n        Prone,\n        Sit,\n        Swing,\n        Greet,\n        Roll,\n        Whirl,\n        Crawl,\n        Stretch,\n        Squat,\n        Pee"],[0,"\n    }\n\n    "]],"start1":4730,"start2":4730,"length1":24,"length2":229},{"diffs":[[0,"    Backward"],[1,",\n        //% block=\"to the left\"\n        //% block.loc.nl=\"naar links\"\n        Left,\n        //% block=\"to the right\"\n        //% block.loc.nl=\"naar rechts\"\n        Right"],[0,"\n    }\n\n    "]],"start1":6812,"start2":6812,"length1":24,"length2":195},{"diffs":[[0,"um Action {\n"],[1,"        //% block=\"stand up\"\n        //% block.loc.nl=\"staan\"\n        Stand,\n        //% block=\"lay down\"\n        //% block.loc.nl=\"liggen\"\n        Prone,\n        //% block=\"swing\"\n        //% block.loc.nl=\"swingen\"\n        Swing,\n        //% block=\"greet\"\n        //% block.loc.nl=\"groeten\"\n        Greet,\n        //% block=\"roll\"\n        //% block.loc.nl=\"schudden\"\n        Roll,\n        //% block=\"whirl\"\n        //% block.loc.nl=\"wervelen\"\n        Whirl,\n        //% block=\"crawl\"\n        //% block.loc.nl=\"besluipen\"\n        Crawl,\n        //% block=\"stretch\"\n        //% block.loc.nl=\"uitrekken\"\n        Stretch,\n        //% block=\"squat\"\n        //% block.loc.nl=\"hurken\"\n        Squat,\n"],[0,"        //% "]],"start1":7636,"start2":7636,"length1":24,"length2":718},{"diffs":[[0,"    "],[-1,"let data = Math.map(0, -100, 100, 0, 255)\n        writeCommand(0x09, 0x30, data)  // mover forward / backward\n        writeCommand(0x09, 0x32, data)  // turn left/right"],[1,"xgo.move_xgo(xgo.direction_enum.Forward, 0)\n        xgo.move_xgo(xgo.direction_enum.Left, 0)\n        xgo.rotate(xgo.rotate_enum.Left, 0)"],[0,"\n   "]],"start1":8561,"start2":8561,"length1":176,"length2":144}]}]},{"timestamp":1737239254437,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ction {\n"],[1,"\n"],[0,"        "],[-1,"F"],[1,"//% block=\"f"],[0,"orward"],[-1,","],[1,"\""],[0,"\n       "]],"start1":1925,"start2":1925,"length1":32,"length2":44},{"diffs":[[0,"orward\"\n        "],[-1,"Back"],[1,"For"],[0,"ward,\n        Cl"]],"start1":1954,"start2":1954,"length1":36,"length2":35},{"diffs":[[0,"    "],[-1,"Clockwise,\n        CounterClockwise"],[1,"//% block=\"backward\"\n        Backward"],[0,"\n   "]],"start1":1983,"start2":1983,"length1":43,"length2":45},{"diffs":[[0,"irection, speed:"],[1," number, time:"],[0," number) {\n     "]],"start1":2842,"start2":2842,"length1":32,"length2":46},{"diffs":[[0,"time: number) {\n"],[-1,""],[0,"        if (dire"]],"start1":2867,"start2":2867,"length1":32,"length2":32},{"diffs":[[0,"09, 0x30, data)\n"],[1,""],[0,"        basic.pa"]],"start1":3067,"start2":3067,"length1":32,"length2":32},{"diffs":[[0," }\n\n"],[-1,"    function rotateRider(direct: Rotation, speed: number) {\n        if (direct == Rotation.Clockwise)\n            speed = speed\n        else\n            speed = -speed\n        let data = Math.map(speed, -100, 100, 0, 255)\n        writeCommand(0x09, 0x32, data)\n    }\n\n"],[0,"    "]],"start1":3111,"start2":3111,"length1":276,"length2":8},{"diffs":[[0,"move"],[1,"r"],[0," forward"],[-1,"/"],[1," / "],[0,"back"]],"start1":7463,"start2":7463,"length1":17,"length2":20},{"diffs":[[0,"essage() {\n\n"],[1,"        // A leader sends its movements to the followers\n        if (!POSITION)\n            radio.sendNumber(MESSAGE)\n\n"],[0,"        // I"]],"start1":7574,"start2":7574,"length1":24,"length2":143},{"diffs":[[0,"          break\n"],[1,"            case Message.Pause:\n                PAUSE = true\n                stopMoving()\n                break\n            case Message.Continue:\n                PAUSE = false\n                break\n"],[0,"            case"]],"start1":8927,"start2":8927,"length1":32,"length2":231},{"diffs":[[0,"        "],[-1,"moveRider(D"],[1,"xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                xgo.move_xgo(xgo.d"],[0,"irection"],[1,"_enum"],[0,".Forward"]],"start1":9598,"start2":9598,"length1":35,"length2":156},{"diffs":[[0,"    "],[-1,"moveRider(D"],[1,"xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                xgo.move_xgo(xgo.d"],[0,"irection"],[1,"_enum"],[0,".Bac"]],"start1":9876,"start2":9876,"length1":27,"length2":148}]}]},{"timestamp":1737239850437,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"Mode()\n\n    "],[1,"export "],[0,"enum Directi"]],"start1":1897,"start2":1897,"length1":24,"length2":31},{"diffs":[[0,"wise\n    }\n\n    "],[1,"//% block=\"Get the current battery level of Rider\"\n    export "],[0,"function battery"]],"start1":2007,"start2":2007,"length1":32,"length2":94},{"diffs":[[0,"x01)\n    }\n\n    "],[1,"//% block=\"set Rider height %high mm\"\n    //% high.min=-20 high.max=20\n    export "],[0,"function setHeig"]],"start1":2160,"start2":2160,"length1":32,"length2":114},{"diffs":[[0,"100)\n    }\n\n    "],[1,"//% block=\"Adjust the left and right tilt of the fuselage %angle °\"\n    //% angle.min=-100 angle.max=100\n    export "],[0,"function setAngl"]],"start1":2407,"start2":2407,"length1":32,"length2":148},{"diffs":[[0,"100)\n    }\n\n    "],[1,"//% block=\"Move %direct at %speed speed for %time s\"\n    //% speed.min=0 speed.max=100\n    export "],[0,"function moveRid"]],"start1":2687,"start2":2687,"length1":32,"length2":130},{"diffs":[[0,"teRider(direct: "],[-1,"Direc"],[1,"Rota"],[0,"tion, speed: num"]],"start1":3105,"start2":3105,"length1":37,"length2":36},{"diffs":[[0," (direct == "],[-1,"Direc"],[1,"Rota"],[0,"tion.Clockwi"]],"start1":3158,"start2":3158,"length1":29,"length2":28},{"diffs":[[0,"ata)\n    }\n\n    "],[1,"//% block=\"Set Rider to perform squatting motion with a period of %time s\"\n    //% time.min=2 time.max=4\n    export "],[0,"function squatti"]],"start1":3344,"start2":3344,"length1":32,"length2":148},{"diffs":[[0,"ata)\n    }\n\n    "],[1,"//% block=\"Set the Rider to shake left and right with a period of %time s\"\n    //% time.min=2 time.max=4\n    export "],[0,"function shuffli"]],"start1":3621,"start2":3621,"length1":32,"length2":148},{"diffs":[[0," TurnOff"],[-1,","],[1," "],[0,"        "]],"start1":4808,"start2":4808,"length1":17,"length2":17},{"diffs":[[0,"sage"],[-1,"\n\n        Pee             // standard action"],[0,"\n   "]],"start1":4862,"start2":4862,"length1":52,"length2":8},{"diffs":[[0,"ase Message."],[-1,"Turn"],[0,"Left:\n      "]],"start1":9751,"start2":9751,"length1":28,"length2":24},{"diffs":[[0,"    "],[-1,"rotateRider(Direction.CounterClockwise"],[1,"// left and right seem to have switched\n                xgo.move_xgo(xgo.direction_enum.Right, SPEED)\n                break\n            case Message.Right:\n                MOVEMENT = Message.Right\n                // left and right seem to have switched\n                xgo.move_xgo(xgo.direction_enum.Left"],[0,", SP"]],"start1":9821,"start2":9821,"length1":46,"length2":313},{"diffs":[[0,"age.Turn"],[-1,"Righ"],[1,"Lef"],[0,"t:\n     "]],"start1":10182,"start2":10182,"length1":20,"length2":19},{"diffs":[[0,"EMENT = Message."],[-1,"Right"],[1,"TurnLeft\n                xgo.move_xgo(xgo.direction_enum.Left, 0)"],[0,"\n               "]],"start1":10215,"start2":10215,"length1":37,"length2":97},{"diffs":[[0,"    "],[1,"xgo."],[0,"rotate"],[-1,"Rider(Direction.Clockwise, SPEED"],[1,"(xgo.rotate_enum.Left, 100)\n                break\n            case Message.TurnRight:\n                MOVEMENT = Message.TurnRight\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Right, 100"],[0,")\n  "]],"start1":10309,"start2":10309,"length1":46,"length2":259},{"diffs":[[0,"    "],[1,"xgo."],[0,"rotate"],[-1,"Rider(Direction.Clockwise"],[1,"(xgo.rotate_enum.Left"],[0,", 0)"]],"start1":10677,"start2":10677,"length1":39,"length2":39},{"diffs":[[0,"XGO "],[-1,"STANDARD ACTIONS\n            //\n            case Message.Pee:\n                break"],[1,"ARM CONTROL\n            //\n            case Message.ArmHigh:\n                xgo.Manipulator_clampX(40)\n                xgo.Manipulator_clampZ(90)\n                break\n            case Message.ArmFront:\n                xgo.Manipulator_clampX(70)\n                xgo.Manipulator_clampZ(80)\n                break\n            case Message.ArmLow:\n                xgo.Manipulator_clampX(90)\n                xgo.Manipulator_clampZ(50)\n                break\n            case Message.ArmFloor:\n                xgo.Manipulator_clampX(80)\n                xgo.Manipulator_clampZ(10)\n                break\n            case Message.ClampClose:\n                xgo.Manipulator_clamp(CLAMPCLOSED)\n                break\n            case Message.ClampOpen:\n                xgo.Manipulator_clamp(CLAMPOPEN)\n                break\n            //\n            // XGO STANDARD ACTIONS\n            //\n            case Message.Stand: xgo.execution_action(xgo.action_enum.Default_posture); break;\n            case Message.Prone: xgo.body_height(0); xgo.servo_switch(xgo.servo_switch_enum.Unload); break;\n            case Message.Sit: xgo.execution_action(xgo.action_enum.Sit_down); break;\n            case Message.Pee: xgo.execution_action(xgo.action_enum.Pee); break;\n            case Message.Swing: xgo.execution_action(xgo.action_enum.Play_pendulum); break;\n            case Message.Greet: xgo.execution_action(xgo.action_enum.Wave); break;\n            case Message.Roll: xgo.execution_action(xgo.action_enum.Twirl_Roll); break;\n            case Message.Whirl: xgo.execution_action(xgo.action_enum.Whirl); break;\n            case Message.Crawl: xgo.execution_action(xgo.action_enum.Crawl_forward); break;\n            case Message.Stretch: xgo.execution_action(xgo.action_enum.Stretch_oneself); break;\n            case Message.Squat: xgo.execution_action(xgo.action_enum.Squat); break;\n            //\n            // NO NEED TO HANDLE Message.Activity HERE\n            //"],[0,"\n   "]],"start1":11302,"start2":11302,"length1":91,"length2":1956},{"diffs":[[0,"itch (action) {\n"],[1,"            case Action.Stand: MESSAGE = Message.Stand; break;\n            case Action.Prone: MESSAGE = Message.Prone; break;\n            case Action.Swing: MESSAGE = Message.Swing; break;\n            case Action.Greet: MESSAGE = Message.Greet; break;\n            case Action.Roll: MESSAGE = Message.Roll; break;\n            case Action.Whirl: MESSAGE = Message.Whirl; break;\n            case Action.Crawl: MESSAGE = Message.Crawl; break;\n            case Action.Stretch: MESSAGE = Message.Stretch; break;\n            case Action.Squat: MESSAGE = Message.Squat; break;\n"],[0,"            case"]],"start1":14512,"start2":14512,"length1":32,"length2":601},{"diffs":[[0,"ackward; break;\n"],[1,"            case Movement.Left: MESSAGE = Message.Left; break;\n            case Movement.Right: MESSAGE = Message.Right; break;\n"],[0,"        }\n      "]],"start1":15819,"start2":15819,"length1":32,"length2":160}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":231,"start2":231,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests gaan hier; deze zal niet worden gecompileerd wanneer dit pakket wordt gebruikt als extensie.\n"}]}],"snapshots":[{"timestamp":1737111363901,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-xgorider\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1737229681448,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables></xml>","main.ts":"//% color=\"#00CC00\" icon=\"\\u2B88\"\n//% block=\"XGO Lite\"\n//% block.loc.nl=\"XGO Lite\"\nnamespace CXgoRider {\n\n    export type gamepadHandler = () => void\n\n    export enum Button {\n        //% block=\"black-top\"\n        //% block.loc.nl=\"zwart-boven\"\n        Button1,\n        //% block=\"black-bottom\"\n        //% block.loc.nl=\"zwart-onder\"\n        Button2,\n        //% block=\"black-left\"\n        //% block.loc.nl=\"zwart-links\"\n        Button3,\n        //% block=\"black-right\"\n        //% block.loc.nl=\"zwart-rechts\"\n        Button4,\n        //% block=\"white-top\"\n        //% block.loc.nl=\"wit-boven\"\n        Button5,\n        //% block=\"white-bottom\"\n        //% block.loc.nl=\"wit-onder\"\n        Button6,\n        //% block=\"white-left\"\n        //% block.loc.nl=\"wit-links\"\n        Button7,\n        //% block=\"white-right\"\n        //% block.loc.nl=\"wit-rechts\"\n        Button8,\n        //% block=\"yellow-top\"\n        //% block.loc.nl=\"geel-boven\"\n        Button9,\n        //% block=\"yellow-bottom\"\n        //% block.loc.nl=\"geel-onder\"\n        Button10,\n        //% block=\"blue\"\n        //% block.loc.nl=\"blauw\"\n        Button11,\n        //% block=\"red\"\n        //% block.loc.nl=\"rood\"\n        Button12\n    }\n\n    let EventGamepad1: gamepadHandler\n    let EventGamepad2: gamepadHandler\n    let EventGamepad3: gamepadHandler\n    let EventGamepad4: gamepadHandler\n    let EventGamepad5: gamepadHandler\n    let EventGamepad6: gamepadHandler\n    let EventGamepad7: gamepadHandler\n    let EventGamepad8: gamepadHandler\n    let EventGamepad9: gamepadHandler\n    let EventGamepad10: gamepadHandler\n    let EventGamepad11: gamepadHandler\n    let EventGamepad12: gamepadHandler\n\n    export enum Group {\n        //% block=\"group 1\"\n        //% block.loc.nl=\"groep 1\"\n        Group1,\n        //% block=\"group 2\"\n        //% block.loc.nl=\"groep 2\"\n        Group2,\n        //% block=\"group 3\"\n        //% block.loc.nl=\"groep 3\"\n        Group3,\n        //% block=\"group 4\"\n        //% block.loc.nl=\"groep 4\"\n        Group4,\n        //% block=\"group 5\"\n        //% block.loc.nl=\"groep 5\"\n        Group5,\n        //% block=\"group 6\"\n        //% block.loc.nl=\"groep 6\"\n        Group6,\n        //% block=\"group 7\"\n        //% block.loc.nl=\"groep 7\"\n        Group7,\n        //% block=\"group 8\"\n        //% block.loc.nl=\"groep 8\"\n        Group8,\n        //% block=\"group 9\"\n        //% block.loc.nl=\"groep 9\"\n        Group9\n    }\n\n    let GROUP = 0\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-xgorider\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1737231502244,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables></xml>","main.ts":"//% color=\"#00CC00\" icon=\"\\u2B88\"\n//% block=\"XGO Lite\"\n//% block.loc.nl=\"XGO Lite\"\nnamespace CXgoRider {\n\n    xgo.initXGOSerial(SerialPin.P14, SerialPin.P13)\n\n    //////////////\n    // MESSAGES //\n    //////////////\n\n    // The XGo is programmed by means of messages.\n    // The available messages are enumerated in 'Message'\n    // and are executed by the routine 'handleMessage'.\n\n    enum Message {\n\n        Stop,           // stops the walking\n        Wait,           // suspend the program for the specified time\n        Pause,          // pause the program until Message.Continue\n        Continue,       // continue the program after Message.Pause\n\n        FastWave,       // execute next message in a wave\n        NormalWave,\n        SlowWave,\n\n        Action,         // perform a standard action\n\n        Forward,        // move in the specified direction\n        Backward,\n        Left,\n        Right,\n\n        SetSpeed,       // set the speed between 0 and 100 %\n        SpeedUp,        // speeding up by 10 %\n        SlowDown,       // slowing down by 10 %\n\n        TurnLeft,       // turn as a continuous rotation\n        TurnRight,      // the rotation will be stopped by\n        TurnOff,        // a movement message or the stop message\n\n        Stand,          // perform an XGo standard action\n        Prone,\n        Sit,\n        Swing,\n        Greet,\n        Roll,\n        Whirl,\n        Crawl,\n        Stretch,\n        Squat,\n        Pee\n    }\n\n    let MESSAGE: number = -1\n    let PAUSE: boolean = false\n\n    //////////////////////////////\n    // SEVERAL XGO'S IN A GROUP //\n    //////////////////////////////\n\n    // In a group a rider should call:\n    // - setGroup, specifying the group it is committed to.\n    // - setPosition, specifying the position within the group.\n    // The position in the group determines the waiting time\n    // when an instruction must be performed in 'wave'-mode.\n\n    export enum Position {\n        //% block=\"position 1\"\n        //% block.loc.nl=\"positie 1\"\n        Position1,\n        //% block=\"position 2\"\n        //% block.loc.nl=\"positie 2\"\n        Position2,\n        //% block=\"position 3\"\n        //% block.loc.nl=\"positie 3\"\n        Position3,\n        //% block=\"position 4\"\n        //% block.loc.nl=\"positie 4\"\n        Position4,\n        //% block=\"position 5\"\n        //% block.loc.nl=\"positie 5\"\n        Position5,\n        //% block=\"position 6\"\n        //% block.loc.nl=\"positie 6\"\n        Position6,\n        //% block=\"position 7\"\n        //% block.loc.nl=\"positie 7\"\n        Position7,\n        //% block=\"position 8\"\n        //% block.loc.nl=\"positie 8\"\n        Position8,\n        //% block=\"position 9\"\n        //% block.loc.nl=\"positie 9\"\n        Position9\n    }\n\n    export enum Wave {\n        //% block=\"slow\"\n        //% block.loc.nl=\"langzame\"\n        Slow,\n        //% block=\"normal\"\n        //% block.loc.nl=\"gewone\"\n        Normal,\n        //% block=\"fast\"\n        //% block.loc.nl=\"snelle\"\n        Fast\n    }\n\n    let POSITION: number = 0 // leader\n    let WAVE: number = 0\n\n    /////////////////////////\n    // CONTROLLING THE XGO //\n    /////////////////////////\n\n    export enum Movement {\n        //% block=\"forward\"\"\n        //% block.loc.nl=\"vooruit\"\n        Forward,\n        //% block=\"backward\"\n        //% block.loc.nl=\"achteruit\"\n        Backward,\n        //% block=\"to the left\"\n        //% block.loc.nl=\"naar links\"\n        Left,\n        //% block=\"to the right\"\n        //% block.loc.nl=\"naar rechts\"\n        Right\n    }\n\n    export enum Rotation {\n        //% block=\"to the left\"\n        //% block.loc.nl=\"naar links\"\n        TurnLeft,\n        //% block=\"to the right\"\n        //% block.loc.nl=\"naar rechts\"\n        TurnRight,\n        //% block=\"30 deg to the left\"\n        //% block.loc.nl=\"30 gr naar links\"\n        RotateLeft,\n        //% block=\"30 deg to the right\"\n        //% block.loc.nl=\"30 gr naar rechts\"\n        RotateRight\n    }\n\n    let MOVEMENT: number = Message.Stop // the latest movement message\n\n    // Speed range:\n    // ------------\n    // Value: 0 to 100 (in %)\n    // Message: 1000 to 1100\n    let SPEED: number = 50\n\n    export enum Action {\n        //% block=\"stand up\"\n        //% block.loc.nl=\"staan\"\n        Stand,\n        //% block=\"lay down\"\n        //% block.loc.nl=\"liggen\"\n        Prone,\n        //% block=\"swing\"\n        //% block.loc.nl=\"swingen\"\n        Swing,\n        //% block=\"greet\"\n        //% block.loc.nl=\"groeten\"\n        Greet,\n        //% block=\"roll\"\n        //% block.loc.nl=\"schudden\"\n        Roll,\n        //% block=\"whirl\"\n        //% block.loc.nl=\"wervelen\"\n        Whirl,\n        //% block=\"crawl\"\n        //% block.loc.nl=\"besluipen\"\n        Crawl,\n        //% block=\"stretch\"\n        //% block.loc.nl=\"uitrekken\"\n        Stretch,\n        //% block=\"squat\"\n        //% block.loc.nl=\"hurken\"\n        Squat,\n        //% block=\"pee\"\n        //% block.loc.nl=\"plassen\"\n        Pee\n    }\n\n    ///////////////////////////////\n    // MESSAGE HANDLING ROUTINES //\n    ///////////////////////////////\n\n    function stopMoving() {\n        xgo.move_xgo(xgo.direction_enum.Forward, 0)\n        xgo.move_xgo(xgo.direction_enum.Left, 0)\n        xgo.rotate(xgo.rotate_enum.Left, 0)\n    }\n\n    function handleMessage() {\n\n        // A leader sends its movements to the followers\n        if (!POSITION)\n            radio.sendNumber(MESSAGE)\n\n        // Instead of 'Message.Wait', this message is submitted by\n        // the calculated value of '10000 + wait time'.\n        let wait = 0\n        if (MESSAGE >= 10000) {\n            wait = MESSAGE - 10000\n            MESSAGE = Message.Wait\n        }\n\n        // Instead of 'Message.Speed', this message is submitted by\n        // the calculated value of '1000 + required speed'.\n        if (MESSAGE >= 1000) {\n            SPEED = MESSAGE - 1000\n            // reactivate the latest movement message\n            MESSAGE = MOVEMENT\n        }\n\n        // The messages 'Message.FastWave', 'Message.NormalWave'\n        // and 'Message.SlowWave' only set the WAVE variable\n        // depending on the follower's position.\n        // Afterwards, WAVE is used to pause before the\n        // execution of the next message to create the wave effect.\n        // Message.Stop however is excluded from the wave behaviour.\n        if (WAVE > 0 && MESSAGE != Message.Stop) {\n            basic.pause(WAVE * 1000)\n            WAVE = 0\n        }\n\n        switch (MESSAGE) {\n            case Message.Stop:\n                stopMoving()\n                break\n            case Message.Wait:\n                basic.pause(wait * 1000)\n                break\n            case Message.Pause:\n                PAUSE = true\n                stopMoving()\n                break\n            case Message.Continue:\n                PAUSE = false\n                break\n            case Message.FastWave:\n                WAVE = (POSITION - 1) * 0.3\n                break\n            case Message.NormalWave:\n                WAVE = (POSITION - 1) * 0.5\n                break\n            case Message.SlowWave:\n                WAVE = (POSITION - 1) * 1.0\n                break\n            //\n            // XGO MOVEMENT CONTROL\n            //\n            case Message.Forward:\n                MOVEMENT = Message.Forward\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                xgo.move_xgo(xgo.direction_enum.Forward, SPEED)\n                break\n            case Message.Backward:\n                MOVEMENT = Message.Backward\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                xgo.move_xgo(xgo.direction_enum.Backward, SPEED)\n                break\n            case Message.Left:\n                MOVEMENT = Message.Left\n                // left and right seem to have switched\n                xgo.move_xgo(xgo.direction_enum.Right, SPEED)\n                break\n            case Message.Right:\n                MOVEMENT = Message.Right\n                // left and right seem to have switched\n                xgo.move_xgo(xgo.direction_enum.Left, SPEED)\n                break\n            case Message.TurnLeft:\n                MOVEMENT = Message.TurnLeft\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 100)\n                break\n            case Message.TurnRight:\n                MOVEMENT = Message.TurnRight\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Right, 100)\n                break\n            case Message.TurnOff:\n                MOVEMENT = Message.TurnOff\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                break\n            case Message.SpeedUp:\n                SPEED += 10\n                if (SPEED > 100) SPEED = 100\n                // call handleMessage recursively to activate the speed\n                MESSAGE = MOVEMENT\n                handleMessage()\n                break\n            case Message.SlowDown:\n                SPEED -= 10\n                if (SPEED < 0) SPEED = 0\n                // call handleMessage recursively to activate the speed\n                MESSAGE = MOVEMENT\n                handleMessage()\n                break\n            //\n            // XGO ARM CONTROL\n            //\n            case Message.ArmHigh:\n                xgo.Manipulator_clampX(40)\n                xgo.Manipulator_clampZ(90)\n                break\n            case Message.ArmFront:\n                xgo.Manipulator_clampX(70)\n                xgo.Manipulator_clampZ(80)\n                break\n            case Message.ArmLow:\n                xgo.Manipulator_clampX(90)\n                xgo.Manipulator_clampZ(50)\n                break\n            case Message.ArmFloor:\n                xgo.Manipulator_clampX(80)\n                xgo.Manipulator_clampZ(10)\n                break\n            case Message.ClampClose:\n                xgo.Manipulator_clamp(CLAMPCLOSED)\n                break\n            case Message.ClampOpen:\n                xgo.Manipulator_clamp(CLAMPOPEN)\n                break\n            //\n            // XGO STANDARD ACTIONS\n            //\n            case Message.Stand: xgo.execution_action(xgo.action_enum.Default_posture); break;\n            case Message.Prone: xgo.body_height(0); xgo.servo_switch(xgo.servo_switch_enum.Unload); break;\n            case Message.Sit: xgo.execution_action(xgo.action_enum.Sit_down); break;\n            case Message.Pee: xgo.execution_action(xgo.action_enum.Pee); break;\n            case Message.Swing: xgo.execution_action(xgo.action_enum.Play_pendulum); break;\n            case Message.Greet: xgo.execution_action(xgo.action_enum.Wave); break;\n            case Message.Roll: xgo.execution_action(xgo.action_enum.Twirl_Roll); break;\n            case Message.Whirl: xgo.execution_action(xgo.action_enum.Whirl); break;\n            case Message.Crawl: xgo.execution_action(xgo.action_enum.Crawl_forward); break;\n            case Message.Stretch: xgo.execution_action(xgo.action_enum.Stretch_oneself); break;\n            case Message.Squat: xgo.execution_action(xgo.action_enum.Squat); break;\n            //\n            // NO NEED TO HANDLE Message.Activity HERE\n            //\n        }\n        MESSAGE = -1\n    }\n\n    function showPosition(): void {\n        basic.showString(\"P\" + POSITION.toString())\n    }\n\n    input.onLogoEvent(TouchButtonEvent.Pressed, function () {\n        showPosition()\n    })\n\n    ////////////////////////\n    // PROGRAMMING BLOCKS //\n    ////////////////////////\n\n    //% block=\"position\"\n    //% block.loc.nl=\"positie\"\n    export function position(): number {\n        return POSITION\n    }\n\n    //% block=\"follow at %pos\"\n    //% block.loc.nl=\"volg op %pos\"\n    export function setPosition(pos: Position) {\n        POSITION = pos + 1\n    }\n\n    //% block=\"position %player\"\n    //% block.loc.nl=\"positie %player\"\n    export function isPosition(): number {\n        return POSITION\n    }\n\n    //% block=\"do a %wave wave\"\n    //% block.loc.nl=\"maak een %wave wave\"\n    export function setWave(wave: Wave) {\n        switch (wave) {\n            case Wave.Slow: MESSAGE = Message.SlowWave; break;\n            case Wave.Normal: MESSAGE = Message.NormalWave; break;\n            case Wave.Fast: MESSAGE = Message.FastWave; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"perform the %action\"\n    //% block.loc.nl=\"ga %action\"\n    export function performAction(action: Action) {\n        switch (action) {\n            case Action.Stand: MESSAGE = Message.Stand; break;\n            case Action.Prone: MESSAGE = Message.Prone; break;\n            case Action.Swing: MESSAGE = Message.Swing; break;\n            case Action.Greet: MESSAGE = Message.Greet; break;\n            case Action.Roll: MESSAGE = Message.Roll; break;\n            case Action.Whirl: MESSAGE = Message.Whirl; break;\n            case Action.Crawl: MESSAGE = Message.Crawl; break;\n            case Action.Stretch: MESSAGE = Message.Stretch; break;\n            case Action.Squat: MESSAGE = Message.Squat; break;\n            case Action.Pee: MESSAGE = Message.Pee; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"clamp size: closes to %closed mm and opens to %open mm width\"\n    //% block.loc.nl=\"grijper afmeting: sluit tot %closed mm en opent tot %open mm breedte\"\n    //% closed.min=25 closed.max=50.0 closed.defl=25\n    //% open.min=25 open.max=50.0 open.defl=50\n    // The motor takes a value range of 255 (closed) to 0 (open).\n    // The input in mm should be multiplied by (255-0)/(50-25) therefore.\n    export function setClampRange(closed: number, open: number) {\n        closed = (closed - 25) * 10.2\n        open = (open - 25) * 10.2\n        if (open > closed) {\n            // input was inverted\n            let n = closed\n            closed = open\n            open = n\n        }\n        CLAMPOPEN = open\n        CLAMPCLOSED = closed\n    }\n\n    //% block=\"%state the clamp\"\n    //% block.loc.nl=\"%state de grijper\"\n    export function clamp(state: ClampState) {\n        switch (state) {\n            case ClampState.Open: MESSAGE = Message.ClampOpen; break;\n            case ClampState.Close: MESSAGE = Message.ClampClose; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"move the arm %move\"\n    //% block.loc.nl=\"beweeg de arm %move\"\n    export function moveArm(position: ArmPosition) {\n        switch (position) {\n            case ArmPosition.High: MESSAGE = Message.ArmHigh; break;\n            case ArmPosition.Front: MESSAGE = Message.ArmFront; break;\n            case ArmPosition.Low: MESSAGE = Message.ArmLow; break;\n            case ArmPosition.Floor: MESSAGE = Message.ArmFloor; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"turn %rotation\"\n    //% block.loc.nl=\"draai %rotation\"\n    export function turn(rotation: Rotation) {\n        switch (rotation) {\n            case Rotation.TurnLeft: MESSAGE = Message.TurnLeft; break;\n            case Rotation.TurnRight: MESSAGE = Message.TurnRight; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"walk %movement\"\n    //% block.loc.nl=\"loop %movement\"\n    export function move(movement: Movement) {\n        switch (movement) {\n            case Movement.Forward: MESSAGE = Message.Forward; break;\n            case Movement.Backward: MESSAGE = Message.Backward; break;\n            case Movement.Left: MESSAGE = Message.Left; break;\n            case Movement.Right: MESSAGE = Message.Right; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"set speed to %speed \\\\%\"\n    //% block.loc.nl=\"stel de snelheid in op %speed \\\\%\"\n    //% speed.min=0 speed.max=100 speed.defl=50\n    export function setSpeed(speed: number) {\n        MESSAGE = 1000 + speed;\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"stop\"\n    //% block.loc.nl=\"stop\"\n    export function stop() {\n        MESSAGE = Message.Stop\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"a number from %min upto %max\"\n    //% block.loc.nl=\"een getal van %min t/m %max\"\n    //% max.defl=10\n    export function randomInt(min: number, max: number): number {\n        let i = 0\n        if (min > max) {\n            i = min\n            min = max\n            max = i\n        }\n        i = max - min + 1\n        i = min + Math.floor(Math.random() * i)\n        return i\n    }\n\n    //% block=\"wait %time sec\"\n    //% block.loc.nl=\"wacht %time sec\"\n    //% min.defl=1\n    export function wait(time: number) {\n        MESSAGE = 10000 + time\n        if (!PAUSE) handleMessage()\n    }\n\n    //% color=\"#008800\"\n    //% block=\"comment: %dummy\"\n    //% block.loc.nl=\"uitleg: %dummy\"\n    //% min.defl=\"schrijf hier je uitleg\"\n    export function comment(dummy: string) {\n    }\n\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-xgorider\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"XGO\": \"github:elecfreaks/xgo-rider#v1.5.5\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1737236445610,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables></xml>","main.ts":"//% color=\"#00CC00\" icon=\"\\u2B88\"\n//% block=\"XGO Lite\"\n//% block.loc.nl=\"XGO Lite\"\nnamespace CXgoRider {\n\n    xgo.initXGOSerial(SerialPin.P14, SerialPin.P13)\n\n    //////////////\n    // MESSAGES //\n    //////////////\n\n    // The XGo is programmed by means of messages.\n    // The available messages are enumerated in 'Message'\n    // and are executed by the routine 'handleMessage'.\n\n    enum Message {\n\n        Stop,           // stops the walking\n        Wait,           // suspend the program for the specified time\n        Pause,          // pause the program until Message.Continue\n        Continue,       // continue the program after Message.Pause\n\n        FastWave,       // execute next message in a wave\n        NormalWave,\n        SlowWave,\n\n        Action,         // perform a standard action\n\n        Forward,        // move in the specified direction\n        Backward,\n        Left,\n        Right,\n\n        SetSpeed,       // set the speed between 0 and 100 %\n        SpeedUp,        // speeding up by 10 %\n        SlowDown,       // slowing down by 10 %\n\n        TurnLeft,       // turn as a continuous rotation\n        TurnRight,      // the rotation will be stopped by\n        TurnOff,        // a movement message or the stop message\n\n        Stand,          // perform an XGo standard action\n        Prone,\n        Sit,\n        Swing,\n        Greet,\n        Roll,\n        Whirl,\n        Crawl,\n        Stretch,\n        Squat,\n        Pee\n    }\n\n    let MESSAGE: number = -1\n    let PAUSE: boolean = false\n\n    //////////////////////////////\n    // SEVERAL XGO'S IN A GROUP //\n    //////////////////////////////\n\n    // In a group a rider should call:\n    // - setGroup, specifying the group it is committed to.\n    // - setPosition, specifying the position within the group.\n    // The position in the group determines the waiting time\n    // when an instruction must be performed in 'wave'-mode.\n\n    export enum Position {\n        //% block=\"position 1\"\n        //% block.loc.nl=\"positie 1\"\n        Position1,\n        //% block=\"position 2\"\n        //% block.loc.nl=\"positie 2\"\n        Position2,\n        //% block=\"position 3\"\n        //% block.loc.nl=\"positie 3\"\n        Position3,\n        //% block=\"position 4\"\n        //% block.loc.nl=\"positie 4\"\n        Position4,\n        //% block=\"position 5\"\n        //% block.loc.nl=\"positie 5\"\n        Position5,\n        //% block=\"position 6\"\n        //% block.loc.nl=\"positie 6\"\n        Position6,\n        //% block=\"position 7\"\n        //% block.loc.nl=\"positie 7\"\n        Position7,\n        //% block=\"position 8\"\n        //% block.loc.nl=\"positie 8\"\n        Position8,\n        //% block=\"position 9\"\n        //% block.loc.nl=\"positie 9\"\n        Position9\n    }\n\n    export enum Wave {\n        //% block=\"slow\"\n        //% block.loc.nl=\"langzame\"\n        Slow,\n        //% block=\"normal\"\n        //% block.loc.nl=\"gewone\"\n        Normal,\n        //% block=\"fast\"\n        //% block.loc.nl=\"snelle\"\n        Fast\n    }\n\n    let POSITION: number = 0 // leader\n    let WAVE: number = 0\n\n    /////////////////////////\n    // CONTROLLING THE XGO //\n    /////////////////////////\n\n    export enum Movement {\n        //% block=\"forward\"\"\n        //% block.loc.nl=\"vooruit\"\n        Forward,\n        //% block=\"backward\"\n        //% block.loc.nl=\"achteruit\"\n        Backward,\n        //% block=\"to the left\"\n        //% block.loc.nl=\"naar links\"\n        Left,\n        //% block=\"to the right\"\n        //% block.loc.nl=\"naar rechts\"\n        Right\n    }\n\n    export enum Rotation {\n        //% block=\"to the left\"\n        //% block.loc.nl=\"naar links\"\n        TurnLeft,\n        //% block=\"to the right\"\n        //% block.loc.nl=\"naar rechts\"\n        TurnRight,\n        //% block=\"30 deg to the left\"\n        //% block.loc.nl=\"30 gr naar links\"\n        RotateLeft,\n        //% block=\"30 deg to the right\"\n        //% block.loc.nl=\"30 gr naar rechts\"\n        RotateRight\n    }\n\n    let MOVEMENT: number = Message.Stop // the latest movement message\n\n    // Speed range:\n    // ------------\n    // Value: 0 to 100 (in %)\n    // Message: 1000 to 1100\n    let SPEED: number = 50\n\n    export enum Action {\n        //% block=\"stand up\"\n        //% block.loc.nl=\"staan\"\n        Stand,\n        //% block=\"lay down\"\n        //% block.loc.nl=\"liggen\"\n        Prone,\n        //% block=\"swing\"\n        //% block.loc.nl=\"swingen\"\n        Swing,\n        //% block=\"greet\"\n        //% block.loc.nl=\"groeten\"\n        Greet,\n        //% block=\"roll\"\n        //% block.loc.nl=\"schudden\"\n        Roll,\n        //% block=\"whirl\"\n        //% block.loc.nl=\"wervelen\"\n        Whirl,\n        //% block=\"crawl\"\n        //% block.loc.nl=\"besluipen\"\n        Crawl,\n        //% block=\"stretch\"\n        //% block.loc.nl=\"uitrekken\"\n        Stretch,\n        //% block=\"squat\"\n        //% block.loc.nl=\"hurken\"\n        Squat,\n        //% block=\"pee\"\n        //% block.loc.nl=\"plassen\"\n        Pee\n    }\n\n    ///////////////////////////////\n    // MESSAGE HANDLING ROUTINES //\n    ///////////////////////////////\n\n    function stopMoving() {\n        xgo.move_xgo(xgo.direction_enum.Forward, 0)\n        xgo.move_xgo(xgo.direction_enum.Left, 0)\n        xgo.rotate(xgo.rotate_enum.Left, 0)\n    }\n\n    function handleMessage() {\n\n        // A leader sends its movements to the followers\n        if (!POSITION)\n            radio.sendNumber(MESSAGE)\n\n        // Instead of 'Message.Wait', this message is submitted by\n        // the calculated value of '10000 + wait time'.\n        let wait = 0\n        if (MESSAGE >= 10000) {\n            wait = MESSAGE - 10000\n            MESSAGE = Message.Wait\n        }\n\n        // Instead of 'Message.Speed', this message is submitted by\n        // the calculated value of '1000 + required speed'.\n        if (MESSAGE >= 1000) {\n            SPEED = MESSAGE - 1000\n            // reactivate the latest movement message\n            MESSAGE = MOVEMENT\n        }\n\n        // The messages 'Message.FastWave', 'Message.NormalWave'\n        // and 'Message.SlowWave' only set the WAVE variable\n        // depending on the follower's position.\n        // Afterwards, WAVE is used to pause before the\n        // execution of the next message to create the wave effect.\n        // Message.Stop however is excluded from the wave behaviour.\n        if (WAVE > 0 && MESSAGE != Message.Stop) {\n            basic.pause(WAVE * 1000)\n            WAVE = 0\n        }\n\n        switch (MESSAGE) {\n            case Message.Stop:\n                stopMoving()\n                break\n            case Message.Wait:\n                basic.pause(wait * 1000)\n                break\n            case Message.Pause:\n                PAUSE = true\n                stopMoving()\n                break\n            case Message.Continue:\n                PAUSE = false\n                break\n            case Message.FastWave:\n                WAVE = (POSITION - 1) * 0.3\n                break\n            case Message.NormalWave:\n                WAVE = (POSITION - 1) * 0.5\n                break\n            case Message.SlowWave:\n                WAVE = (POSITION - 1) * 1.0\n                break\n            //\n            // XGO MOVEMENT CONTROL\n            //\n            case Message.Forward:\n                MOVEMENT = Message.Forward\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                xgo.move_xgo(xgo.direction_enum.Forward, SPEED)\n                break\n            case Message.Backward:\n                MOVEMENT = Message.Backward\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                xgo.move_xgo(xgo.direction_enum.Backward, SPEED)\n                break\n            case Message.Left:\n                MOVEMENT = Message.Left\n                // left and right seem to have switched\n                xgo.move_xgo(xgo.direction_enum.Right, SPEED)\n                break\n            case Message.Right:\n                MOVEMENT = Message.Right\n                // left and right seem to have switched\n                xgo.move_xgo(xgo.direction_enum.Left, SPEED)\n                break\n            case Message.TurnLeft:\n                MOVEMENT = Message.TurnLeft\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 100)\n                break\n            case Message.TurnRight:\n                MOVEMENT = Message.TurnRight\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Right, 100)\n                break\n            case Message.TurnOff:\n                MOVEMENT = Message.TurnOff\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                break\n            case Message.SpeedUp:\n                SPEED += 10\n                if (SPEED > 100) SPEED = 100\n                // call handleMessage recursively to activate the speed\n                MESSAGE = MOVEMENT\n                handleMessage()\n                break\n            case Message.SlowDown:\n                SPEED -= 10\n                if (SPEED < 0) SPEED = 0\n                // call handleMessage recursively to activate the speed\n                MESSAGE = MOVEMENT\n                handleMessage()\n                break\n            //\n            // XGO ARM CONTROL\n            //\n            case Message.ArmHigh:\n                xgo.Manipulator_clampX(40)\n                xgo.Manipulator_clampZ(90)\n                break\n            case Message.ArmFront:\n                xgo.Manipulator_clampX(70)\n                xgo.Manipulator_clampZ(80)\n                break\n            case Message.ArmLow:\n                xgo.Manipulator_clampX(90)\n                xgo.Manipulator_clampZ(50)\n                break\n            case Message.ArmFloor:\n                xgo.Manipulator_clampX(80)\n                xgo.Manipulator_clampZ(10)\n                break\n            case Message.ClampClose:\n                xgo.Manipulator_clamp(CLAMPCLOSED)\n                break\n            case Message.ClampOpen:\n                xgo.Manipulator_clamp(CLAMPOPEN)\n                break\n            //\n            // XGO STANDARD ACTIONS\n            //\n            case Message.Stand: xgo.execution_action(xgo.action_enum.Default_posture); break;\n            case Message.Prone: xgo.body_height(0); xgo.servo_switch(xgo.servo_switch_enum.Unload); break;\n            case Message.Sit: xgo.execution_action(xgo.action_enum.Sit_down); break;\n            case Message.Pee: xgo.execution_action(xgo.action_enum.Pee); break;\n            case Message.Swing: xgo.execution_action(xgo.action_enum.Play_pendulum); break;\n            case Message.Greet: xgo.execution_action(xgo.action_enum.Wave); break;\n            case Message.Roll: xgo.execution_action(xgo.action_enum.Twirl_Roll); break;\n            case Message.Whirl: xgo.execution_action(xgo.action_enum.Whirl); break;\n            case Message.Crawl: xgo.execution_action(xgo.action_enum.Crawl_forward); break;\n            case Message.Stretch: xgo.execution_action(xgo.action_enum.Stretch_oneself); break;\n            case Message.Squat: xgo.execution_action(xgo.action_enum.Squat); break;\n            //\n            // NO NEED TO HANDLE Message.Activity HERE\n            //\n        }\n        MESSAGE = -1\n    }\n\n    function showPosition(): void {\n        basic.showString(\"P\" + POSITION.toString())\n    }\n\n    input.onLogoEvent(TouchButtonEvent.Pressed, function () {\n        showPosition()\n    })\n\n    ////////////////////////\n    // PROGRAMMING BLOCKS //\n    ////////////////////////\n\n    //% block=\"position\"\n    //% block.loc.nl=\"positie\"\n    export function position(): number {\n        return POSITION\n    }\n\n    //% block=\"follow at %pos\"\n    //% block.loc.nl=\"volg op %pos\"\n    export function setPosition(pos: Position) {\n        POSITION = pos + 1\n    }\n\n    //% block=\"position %player\"\n    //% block.loc.nl=\"positie %player\"\n    export function isPosition(): number {\n        return POSITION\n    }\n\n    //% block=\"do a %wave wave\"\n    //% block.loc.nl=\"maak een %wave wave\"\n    export function setWave(wave: Wave) {\n        switch (wave) {\n            case Wave.Slow: MESSAGE = Message.SlowWave; break;\n            case Wave.Normal: MESSAGE = Message.NormalWave; break;\n            case Wave.Fast: MESSAGE = Message.FastWave; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"perform the %action\"\n    //% block.loc.nl=\"ga %action\"\n    export function performAction(action: Action) {\n        switch (action) {\n            case Action.Stand: MESSAGE = Message.Stand; break;\n            case Action.Prone: MESSAGE = Message.Prone; break;\n            case Action.Swing: MESSAGE = Message.Swing; break;\n            case Action.Greet: MESSAGE = Message.Greet; break;\n            case Action.Roll: MESSAGE = Message.Roll; break;\n            case Action.Whirl: MESSAGE = Message.Whirl; break;\n            case Action.Crawl: MESSAGE = Message.Crawl; break;\n            case Action.Stretch: MESSAGE = Message.Stretch; break;\n            case Action.Squat: MESSAGE = Message.Squat; break;\n            case Action.Pee: MESSAGE = Message.Pee; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"turn %rotation\"\n    //% block.loc.nl=\"draai %rotation\"\n    export function turn(rotation: Rotation) {\n        switch (rotation) {\n            case Rotation.TurnLeft: MESSAGE = Message.TurnLeft; break;\n            case Rotation.TurnRight: MESSAGE = Message.TurnRight; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"walk %movement\"\n    //% block.loc.nl=\"loop %movement\"\n    export function move(movement: Movement) {\n        switch (movement) {\n            case Movement.Forward: MESSAGE = Message.Forward; break;\n            case Movement.Backward: MESSAGE = Message.Backward; break;\n            case Movement.Left: MESSAGE = Message.Left; break;\n            case Movement.Right: MESSAGE = Message.Right; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"set speed to %speed \\\\%\"\n    //% block.loc.nl=\"stel de snelheid in op %speed \\\\%\"\n    //% speed.min=0 speed.max=100 speed.defl=50\n    export function setSpeed(speed: number) {\n        MESSAGE = 1000 + speed;\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"stop\"\n    //% block.loc.nl=\"stop\"\n    export function stop() {\n        MESSAGE = Message.Stop\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"a number from %min upto %max\"\n    //% block.loc.nl=\"een getal van %min t/m %max\"\n    //% max.defl=10\n    export function randomInt(min: number, max: number): number {\n        let i = 0\n        if (min > max) {\n            i = min\n            min = max\n            max = i\n        }\n        i = max - min + 1\n        i = min + Math.floor(Math.random() * i)\n        return i\n    }\n\n    //% block=\"wait %time sec\"\n    //% block.loc.nl=\"wacht %time sec\"\n    //% min.defl=1\n    export function wait(time: number) {\n        MESSAGE = 10000 + time\n        if (!PAUSE) handleMessage()\n    }\n\n    //% color=\"#008800\"\n    //% block=\"comment: %dummy\"\n    //% block.loc.nl=\"uitleg: %dummy\"\n    //% min.defl=\"schrijf hier je uitleg\"\n    export function comment(dummy: string) {\n    }\n\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-xgorider\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"XGO\": \"github:elecfreaks/xgo-rider#v1.5.5\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1737238570569,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables></xml>","main.ts":"//% color=\"#00CC00\" icon=\"\\u2B88\"\n//% block=\"XGO Lite\"\n//% block.loc.nl=\"XGO Lite\"\nnamespace CXgoRider {\n\n    let headData = 0x5500\n    let tailData = 0x00AA\n    let headDataH = (headData >> 8) & 0xff;\n    let headDataL = (headData >> 0) & 0xff;\n    let tailDataH = (tailData >> 8) & 0xff;\n    let tailDataL = (tailData >> 0) & 0xff;\n\n    function writeCommand(len: number, addr: number, data: number) {\n        let commands_buffer = pins.createBuffer(len)\n        commands_buffer[0] = headDataH\n        commands_buffer[1] = headDataL\n        commands_buffer[2] = len\n        commands_buffer[3] = 0x00\n        commands_buffer[4] = addr\n        commands_buffer[5] = data\n        commands_buffer[6] = ~(len + 0x00 + addr + data)\n        commands_buffer[7] = tailDataH\n        commands_buffer[8] = tailDataL\n        serial.writeBuffer(commands_buffer)\n    }\n\n    function readCommand(len: number, addr: number, readlen: number) {\n        let commands_buffer = pins.createBuffer(len)\n        commands_buffer[0] = headDataH\n        commands_buffer[1] = headDataL\n        commands_buffer[2] = len\n        commands_buffer[3] = 0x02\n        commands_buffer[4] = addr\n        commands_buffer[5] = readlen\n        commands_buffer[6] = ~(len + 0x02 + addr + readlen)\n        commands_buffer[7] = tailDataH\n        commands_buffer[8] = tailDataL\n        serial.writeBuffer(commands_buffer)\n        let read_data_buffer = pins.createBuffer(9)\n        read_data_buffer = serial.readBuffer(9)\n        return read_data_buffer[5]\n    }\n\n    function actionMode() {\n        let status = readCommand(0x09, 0x02, 0x01)\n        if (status == 0x00) return;\n        writeCommand(0x09, 0x3E, 0xFF)\n        basic.pause(1000)\n    }\n\n    function performanceMode() {\n        writeCommand(0x09, 0x03, 0x00)\n        basic.pause(1000)\n    }\n\n    serial.redirect(SerialPin.P14, SerialPin.P13, BaudRate.BaudRate115200)\n    actionMode()\n\n    //% block=\"Get the current battery level of Rider\"\n    export function batteryStatus(): number {\n        return readCommand(0x09, 0x01, 0x01)\n    }\n\n    //% block=\"set Rider height %high mm\"\n    //% high.min=-20 high.max=20\n    export function setHeight(height: number) {\n        let data = Math.map(height, -20, 20, 0, 255)\n        writeCommand(0x09, 0x35, data)\n        basic.pause(100)\n    }\n\n    //% block=\"Adjust the left and right tilt of the fuselage %angle °\"\n    //% angle.min=-100 angle.max=100\n    export function setAngle(angle: number) {\n        let data = Math.map(angle, -100, 100, 0, 255)\n        writeCommand(0x09, 0x36, data)\n        basic.pause(100)\n    }\n\n    //% block=\"Move %direct at %speed speed for %time s\"\n    //% speed.min=0 speed.max=100\n    export function moveRider(direct: DirectionEnum, speed: number, time: number) {\n        if (direct == DirectionEnum.Forward)\n            speed = speed\n        else\n            speed = -speed\n        let data = Math.map(speed, -100, 100, 0, 255)\n        writeCommand(0x09, 0x30, data)\n        basic.pause(100)\n    }\n\n    //////////////\n    // MESSAGES //\n    //////////////\n\n    // The XGo is programmed by means of messages.\n    // The available messages are enumerated in 'Message'\n    // and are executed by the routine 'handleMessage'.\n\n    enum Message {\n\n        Stop,           // stops the walking\n        Wait,           // suspend the program for the specified time\n        Pause,          // pause the program until Message.Continue\n        Continue,       // continue the program after Message.Pause\n\n        FastWave,       // execute next message in a wave\n        NormalWave,\n        SlowWave,\n\n        Action,         // perform a standard action\n\n        Forward,        // move in the specified direction\n        Backward,\n        Left,\n        Right,\n\n        SetSpeed,       // set the speed between 0 and 100 %\n        SpeedUp,        // speeding up by 10 %\n        SlowDown,       // slowing down by 10 %\n\n        TurnLeft,       // turn as a continuous rotation\n        TurnRight,      // the rotation will be stopped by\n        TurnOff,        // a movement message or the stop message\n\n        Stand,          // perform an XGo standard action\n        Prone,\n        Sit,\n        Swing,\n        Greet,\n        Roll,\n        Whirl,\n        Crawl,\n        Stretch,\n        Squat,\n        Pee\n    }\n\n    let MESSAGE: number = -1\n    let PAUSE: boolean = false\n\n    //////////////////////////////\n    // SEVERAL XGO'S IN A GROUP //\n    //////////////////////////////\n\n    // In a group a rider should call:\n    // - setGroup, specifying the group it is committed to.\n    // - setPosition, specifying the position within the group.\n    // The position in the group determines the waiting time\n    // when an instruction must be performed in 'wave'-mode.\n\n    export enum Position {\n        //% block=\"position 1\"\n        //% block.loc.nl=\"positie 1\"\n        Position1,\n        //% block=\"position 2\"\n        //% block.loc.nl=\"positie 2\"\n        Position2,\n        //% block=\"position 3\"\n        //% block.loc.nl=\"positie 3\"\n        Position3,\n        //% block=\"position 4\"\n        //% block.loc.nl=\"positie 4\"\n        Position4,\n        //% block=\"position 5\"\n        //% block.loc.nl=\"positie 5\"\n        Position5,\n        //% block=\"position 6\"\n        //% block.loc.nl=\"positie 6\"\n        Position6,\n        //% block=\"position 7\"\n        //% block.loc.nl=\"positie 7\"\n        Position7,\n        //% block=\"position 8\"\n        //% block.loc.nl=\"positie 8\"\n        Position8,\n        //% block=\"position 9\"\n        //% block.loc.nl=\"positie 9\"\n        Position9\n    }\n\n    export enum Wave {\n        //% block=\"slow\"\n        //% block.loc.nl=\"langzame\"\n        Slow,\n        //% block=\"normal\"\n        //% block.loc.nl=\"gewone\"\n        Normal,\n        //% block=\"fast\"\n        //% block.loc.nl=\"snelle\"\n        Fast\n    }\n\n    let POSITION: number = 0 // leader\n    let WAVE: number = 0\n\n    /////////////////////////\n    // CONTROLLING THE XGO //\n    /////////////////////////\n\n    export enum Movement {\n        //% block=\"forward\"\"\n        //% block.loc.nl=\"vooruit\"\n        Forward,\n        //% block=\"backward\"\n        //% block.loc.nl=\"achteruit\"\n        Backward,\n        //% block=\"to the left\"\n        //% block.loc.nl=\"naar links\"\n        Left,\n        //% block=\"to the right\"\n        //% block.loc.nl=\"naar rechts\"\n        Right\n    }\n\n    export enum Rotation {\n        //% block=\"to the left\"\n        //% block.loc.nl=\"naar links\"\n        TurnLeft,\n        //% block=\"to the right\"\n        //% block.loc.nl=\"naar rechts\"\n        TurnRight,\n        //% block=\"30 deg to the left\"\n        //% block.loc.nl=\"30 gr naar links\"\n        RotateLeft,\n        //% block=\"30 deg to the right\"\n        //% block.loc.nl=\"30 gr naar rechts\"\n        RotateRight\n    }\n\n    let MOVEMENT: number = Message.Stop // the latest movement message\n\n    // Speed range:\n    // ------------\n    // Value: 0 to 100 (in %)\n    // Message: 1000 to 1100\n    let SPEED: number = 50\n\n    export enum Action {\n        //% block=\"stand up\"\n        //% block.loc.nl=\"staan\"\n        Stand,\n        //% block=\"lay down\"\n        //% block.loc.nl=\"liggen\"\n        Prone,\n        //% block=\"swing\"\n        //% block.loc.nl=\"swingen\"\n        Swing,\n        //% block=\"greet\"\n        //% block.loc.nl=\"groeten\"\n        Greet,\n        //% block=\"roll\"\n        //% block.loc.nl=\"schudden\"\n        Roll,\n        //% block=\"whirl\"\n        //% block.loc.nl=\"wervelen\"\n        Whirl,\n        //% block=\"crawl\"\n        //% block.loc.nl=\"besluipen\"\n        Crawl,\n        //% block=\"stretch\"\n        //% block.loc.nl=\"uitrekken\"\n        Stretch,\n        //% block=\"squat\"\n        //% block.loc.nl=\"hurken\"\n        Squat,\n        //% block=\"pee\"\n        //% block.loc.nl=\"plassen\"\n        Pee\n    }\n\n    ///////////////////////////////\n    // MESSAGE HANDLING ROUTINES //\n    ///////////////////////////////\n\n    function stopMoving() {\n        xgo.move_xgo(xgo.direction_enum.Forward, 0)\n        xgo.move_xgo(xgo.direction_enum.Left, 0)\n        xgo.rotate(xgo.rotate_enum.Left, 0)\n    }\n\n    function handleMessage() {\n\n        // A leader sends its movements to the followers\n        if (!POSITION)\n            radio.sendNumber(MESSAGE)\n\n        // Instead of 'Message.Wait', this message is submitted by\n        // the calculated value of '10000 + wait time'.\n        let wait = 0\n        if (MESSAGE >= 10000) {\n            wait = MESSAGE - 10000\n            MESSAGE = Message.Wait\n        }\n\n        // Instead of 'Message.Speed', this message is submitted by\n        // the calculated value of '1000 + required speed'.\n        if (MESSAGE >= 1000) {\n            SPEED = MESSAGE - 1000\n            // reactivate the latest movement message\n            MESSAGE = MOVEMENT\n        }\n\n        // The messages 'Message.FastWave', 'Message.NormalWave'\n        // and 'Message.SlowWave' only set the WAVE variable\n        // depending on the follower's position.\n        // Afterwards, WAVE is used to pause before the\n        // execution of the next message to create the wave effect.\n        // Message.Stop however is excluded from the wave behaviour.\n        if (WAVE > 0 && MESSAGE != Message.Stop) {\n            basic.pause(WAVE * 1000)\n            WAVE = 0\n        }\n\n        switch (MESSAGE) {\n            case Message.Stop:\n                stopMoving()\n                break\n            case Message.Wait:\n                basic.pause(wait * 1000)\n                break\n            case Message.Pause:\n                PAUSE = true\n                stopMoving()\n                break\n            case Message.Continue:\n                PAUSE = false\n                break\n            case Message.FastWave:\n                WAVE = (POSITION - 1) * 0.3\n                break\n            case Message.NormalWave:\n                WAVE = (POSITION - 1) * 0.5\n                break\n            case Message.SlowWave:\n                WAVE = (POSITION - 1) * 1.0\n                break\n            //\n            // XGO MOVEMENT CONTROL\n            //\n            case Message.Forward:\n                MOVEMENT = Message.Forward\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                xgo.move_xgo(xgo.direction_enum.Forward, SPEED)\n                break\n            case Message.Backward:\n                MOVEMENT = Message.Backward\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                xgo.move_xgo(xgo.direction_enum.Backward, SPEED)\n                break\n            case Message.Left:\n                MOVEMENT = Message.Left\n                // left and right seem to have switched\n                xgo.move_xgo(xgo.direction_enum.Right, SPEED)\n                break\n            case Message.Right:\n                MOVEMENT = Message.Right\n                // left and right seem to have switched\n                xgo.move_xgo(xgo.direction_enum.Left, SPEED)\n                break\n            case Message.TurnLeft:\n                MOVEMENT = Message.TurnLeft\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 100)\n                break\n            case Message.TurnRight:\n                MOVEMENT = Message.TurnRight\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Right, 100)\n                break\n            case Message.TurnOff:\n                MOVEMENT = Message.TurnOff\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                break\n            case Message.SpeedUp:\n                SPEED += 10\n                if (SPEED > 100) SPEED = 100\n                // call handleMessage recursively to activate the speed\n                MESSAGE = MOVEMENT\n                handleMessage()\n                break\n            case Message.SlowDown:\n                SPEED -= 10\n                if (SPEED < 0) SPEED = 0\n                // call handleMessage recursively to activate the speed\n                MESSAGE = MOVEMENT\n                handleMessage()\n                break\n            //\n            // XGO ARM CONTROL\n            //\n            case Message.ArmHigh:\n                xgo.Manipulator_clampX(40)\n                xgo.Manipulator_clampZ(90)\n                break\n            case Message.ArmFront:\n                xgo.Manipulator_clampX(70)\n                xgo.Manipulator_clampZ(80)\n                break\n            case Message.ArmLow:\n                xgo.Manipulator_clampX(90)\n                xgo.Manipulator_clampZ(50)\n                break\n            case Message.ArmFloor:\n                xgo.Manipulator_clampX(80)\n                xgo.Manipulator_clampZ(10)\n                break\n            case Message.ClampClose:\n                xgo.Manipulator_clamp(CLAMPCLOSED)\n                break\n            case Message.ClampOpen:\n                xgo.Manipulator_clamp(CLAMPOPEN)\n                break\n            //\n            // XGO STANDARD ACTIONS\n            //\n            case Message.Stand: xgo.execution_action(xgo.action_enum.Default_posture); break;\n            case Message.Prone: xgo.body_height(0); xgo.servo_switch(xgo.servo_switch_enum.Unload); break;\n            case Message.Sit: xgo.execution_action(xgo.action_enum.Sit_down); break;\n            case Message.Pee: xgo.execution_action(xgo.action_enum.Pee); break;\n            case Message.Swing: xgo.execution_action(xgo.action_enum.Play_pendulum); break;\n            case Message.Greet: xgo.execution_action(xgo.action_enum.Wave); break;\n            case Message.Roll: xgo.execution_action(xgo.action_enum.Twirl_Roll); break;\n            case Message.Whirl: xgo.execution_action(xgo.action_enum.Whirl); break;\n            case Message.Crawl: xgo.execution_action(xgo.action_enum.Crawl_forward); break;\n            case Message.Stretch: xgo.execution_action(xgo.action_enum.Stretch_oneself); break;\n            case Message.Squat: xgo.execution_action(xgo.action_enum.Squat); break;\n            //\n            // NO NEED TO HANDLE Message.Activity HERE\n            //\n        }\n        MESSAGE = -1\n    }\n\n    function showPosition(): void {\n        basic.showString(\"P\" + POSITION.toString())\n    }\n\n    input.onLogoEvent(TouchButtonEvent.Pressed, function () {\n        showPosition()\n    })\n\n    ////////////////////////\n    // PROGRAMMING BLOCKS //\n    ////////////////////////\n\n    //% block=\"position\"\n    //% block.loc.nl=\"positie\"\n    export function position(): number {\n        return POSITION\n    }\n\n    //% block=\"follow at %pos\"\n    //% block.loc.nl=\"volg op %pos\"\n    export function setPosition(pos: Position) {\n        POSITION = pos + 1\n    }\n\n    //% block=\"position %player\"\n    //% block.loc.nl=\"positie %player\"\n    export function isPosition(): number {\n        return POSITION\n    }\n\n    //% block=\"do a %wave wave\"\n    //% block.loc.nl=\"maak een %wave wave\"\n    export function setWave(wave: Wave) {\n        switch (wave) {\n            case Wave.Slow: MESSAGE = Message.SlowWave; break;\n            case Wave.Normal: MESSAGE = Message.NormalWave; break;\n            case Wave.Fast: MESSAGE = Message.FastWave; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"perform the %action\"\n    //% block.loc.nl=\"ga %action\"\n    export function performAction(action: Action) {\n        switch (action) {\n            case Action.Stand: MESSAGE = Message.Stand; break;\n            case Action.Prone: MESSAGE = Message.Prone; break;\n            case Action.Swing: MESSAGE = Message.Swing; break;\n            case Action.Greet: MESSAGE = Message.Greet; break;\n            case Action.Roll: MESSAGE = Message.Roll; break;\n            case Action.Whirl: MESSAGE = Message.Whirl; break;\n            case Action.Crawl: MESSAGE = Message.Crawl; break;\n            case Action.Stretch: MESSAGE = Message.Stretch; break;\n            case Action.Squat: MESSAGE = Message.Squat; break;\n            case Action.Pee: MESSAGE = Message.Pee; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"turn %rotation\"\n    //% block.loc.nl=\"draai %rotation\"\n    export function turn(rotation: Rotation) {\n        switch (rotation) {\n            case Rotation.TurnLeft: MESSAGE = Message.TurnLeft; break;\n            case Rotation.TurnRight: MESSAGE = Message.TurnRight; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"walk %movement\"\n    //% block.loc.nl=\"loop %movement\"\n    export function move(movement: Movement) {\n        switch (movement) {\n            case Movement.Forward: MESSAGE = Message.Forward; break;\n            case Movement.Backward: MESSAGE = Message.Backward; break;\n            case Movement.Left: MESSAGE = Message.Left; break;\n            case Movement.Right: MESSAGE = Message.Right; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"set speed to %speed \\\\%\"\n    //% block.loc.nl=\"stel de snelheid in op %speed \\\\%\"\n    //% speed.min=0 speed.max=100 speed.defl=50\n    export function setSpeed(speed: number) {\n        MESSAGE = 1000 + speed;\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"stop\"\n    //% block.loc.nl=\"stop\"\n    export function stop() {\n        MESSAGE = Message.Stop\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"a number from %min upto %max\"\n    //% block.loc.nl=\"een getal van %min t/m %max\"\n    //% max.defl=10\n    export function randomInt(min: number, max: number): number {\n        let i = 0\n        if (min > max) {\n            i = min\n            min = max\n            max = i\n        }\n        i = max - min + 1\n        i = min + Math.floor(Math.random() * i)\n        return i\n    }\n\n    //% block=\"wait %time sec\"\n    //% block.loc.nl=\"wacht %time sec\"\n    //% min.defl=1\n    export function wait(time: number) {\n        MESSAGE = 10000 + time\n        if (!PAUSE) handleMessage()\n    }\n\n    //% color=\"#008800\"\n    //% block=\"comment: %dummy\"\n    //% block.loc.nl=\"uitleg: %dummy\"\n    //% min.defl=\"schrijf hier je uitleg\"\n    export function comment(dummy: string) {\n    }\n\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-xgorider\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1737240379759,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables></xml>","main.ts":"//% color=\"#00CC00\" icon=\"\\u2B88\"\n//% block=\"XGO Lite\"\n//% block.loc.nl=\"XGO Lite\"\nnamespace CXgoRider {\n\n    let headData = 0x5500\n    let tailData = 0x00AA\n    let headDataH = (headData >> 8) & 0xff;\n    let headDataL = (headData >> 0) & 0xff;\n    let tailDataH = (tailData >> 8) & 0xff;\n    let tailDataL = (tailData >> 0) & 0xff;\n\n    function writeCommand(len: number, addr: number, data: number) {\n        let commands_buffer = pins.createBuffer(len)\n        commands_buffer[0] = headDataH\n        commands_buffer[1] = headDataL\n        commands_buffer[2] = len\n        commands_buffer[3] = 0x00\n        commands_buffer[4] = addr\n        commands_buffer[5] = data\n        commands_buffer[6] = ~(len + 0x00 + addr + data)\n        commands_buffer[7] = tailDataH\n        commands_buffer[8] = tailDataL\n        serial.writeBuffer(commands_buffer)\n    }\n\n    function readCommand(len: number, addr: number, readlen: number) {\n        let commands_buffer = pins.createBuffer(len)\n        commands_buffer[0] = headDataH\n        commands_buffer[1] = headDataL\n        commands_buffer[2] = len\n        commands_buffer[3] = 0x02\n        commands_buffer[4] = addr\n        commands_buffer[5] = readlen\n        commands_buffer[6] = ~(len + 0x02 + addr + readlen)\n        commands_buffer[7] = tailDataH\n        commands_buffer[8] = tailDataL\n        serial.writeBuffer(commands_buffer)\n        let read_data_buffer = pins.createBuffer(9)\n        read_data_buffer = serial.readBuffer(9)\n        return read_data_buffer[5]\n    }\n\n    function actionMode() {\n        let status = readCommand(0x09, 0x02, 0x01)\n        if (status == 0x00) return;\n        writeCommand(0x09, 0x3E, 0xFF)\n        basic.pause(1000)\n    }\n\n    function performanceMode() {\n        writeCommand(0x09, 0x03, 0x00)\n        basic.pause(1000)\n    }\n\n    serial.redirect(SerialPin.P14, SerialPin.P13, BaudRate.BaudRate115200)\n    actionMode()\n\n    enum Direction {\n        Forward,\n        Backward,\n        Clockwise,\n        CounterClockwise\n    }\n\n    function batteryStatus(): number {\n        return readCommand(0x09, 0x01, 0x01)\n    }\n\n    function setHeight(height: number) {\n        let data = Math.map(height, -20, 20, 0, 255)\n        writeCommand(0x09, 0x35, data)\n        basic.pause(100)\n    }\n\n    function setAngle(angle: number) {\n        let data = Math.map(angle, -100, 100, 0, 255)\n        writeCommand(0x09, 0x36, data)\n        basic.pause(100)\n    }\n\n    function moveRider(direct: Direction, speed: number) {\n        if (direct == Direction.Forward)\n            speed = speed\n        else\n            speed = -speed\n        let data = Math.map(speed, -100, 100, 0, 255)\n        writeCommand(0x09, 0x30, data)\n        basic.pause(100)\n    }\n\n    function rotateRider(direct: Direction, speed: number) {\n        if (direct == Direction.Clockwise)\n            speed = speed\n        else\n            speed = -speed\n        let data = Math.map(speed, -100, 100, 0, 255)\n        writeCommand(0x09, 0x32, data)\n    }\n\n    function squattingFunc(time: number) {\n        time = 4 - time\n        let data = Math.map(time, 0, 2, 1, 255)\n        writeCommand(0x09, 0x82, data)\n    }\n\n    function shufflingFunc(time: number) {\n        time = 4 - time\n        let data = Math.map(time, 0, 2, 1, 255)\n        writeCommand(0x09, 0x39, data)\n    }\n\n    //////////////\n    // MESSAGES //\n    //////////////\n\n    // The XGo is programmed by means of messages.\n    // The available messages are enumerated in 'Message'\n    // and are executed by the routine 'handleMessage'.\n\n    enum Message {\n\n        Stop,           // stops the walking\n        Wait,           // suspend the program for the specified time\n\n        FastWave,       // execute next message in a wave\n        NormalWave,\n        SlowWave,\n\n        Action,         // perform a standard action\n\n        Forward,        // move in the specified direction\n        Backward,\n        Left,\n        Right,\n\n        SetSpeed,       // set the speed between 0 and 100 %\n        SpeedUp,        // speeding up by 10 %\n        SlowDown,       // slowing down by 10 %\n\n        TurnLeft,       // turn as a continuous rotation\n        TurnRight,      // the rotation will be stopped by\n        TurnOff,        // a movement message or the stop message\n\n        Pee             // standard action\n    }\n\n    let MESSAGE: number = -1\n    let PAUSE: boolean = false\n\n    //////////////////////////////\n    // SEVERAL XGO'S IN A GROUP //\n    //////////////////////////////\n\n    // In a group a rider should call:\n    // - setGroup, specifying the group it is committed to.\n    // - setPosition, specifying the position within the group.\n    // The position in the group determines the waiting time\n    // when an instruction must be performed in 'wave'-mode.\n\n    export enum Position {\n        //% block=\"position 1\"\n        //% block.loc.nl=\"positie 1\"\n        Position1,\n        //% block=\"position 2\"\n        //% block.loc.nl=\"positie 2\"\n        Position2,\n        //% block=\"position 3\"\n        //% block.loc.nl=\"positie 3\"\n        Position3,\n        //% block=\"position 4\"\n        //% block.loc.nl=\"positie 4\"\n        Position4,\n        //% block=\"position 5\"\n        //% block.loc.nl=\"positie 5\"\n        Position5,\n        //% block=\"position 6\"\n        //% block.loc.nl=\"positie 6\"\n        Position6,\n        //% block=\"position 7\"\n        //% block.loc.nl=\"positie 7\"\n        Position7,\n        //% block=\"position 8\"\n        //% block.loc.nl=\"positie 8\"\n        Position8,\n        //% block=\"position 9\"\n        //% block.loc.nl=\"positie 9\"\n        Position9\n    }\n\n    export enum Wave {\n        //% block=\"slow\"\n        //% block.loc.nl=\"langzame\"\n        Slow,\n        //% block=\"normal\"\n        //% block.loc.nl=\"gewone\"\n        Normal,\n        //% block=\"fast\"\n        //% block.loc.nl=\"snelle\"\n        Fast\n    }\n\n    let POSITION: number = 0 // leader\n    let WAVE: number = 0\n\n    /////////////////////////\n    // CONTROLLING THE XGO //\n    /////////////////////////\n\n    export enum Movement {\n        //% block=\"forward\"\"\n        //% block.loc.nl=\"vooruit\"\n        Forward,\n        //% block=\"backward\"\n        //% block.loc.nl=\"achteruit\"\n        Backward\n    }\n\n    export enum Rotation {\n        //% block=\"to the left\"\n        //% block.loc.nl=\"naar links\"\n        TurnLeft,\n        //% block=\"to the right\"\n        //% block.loc.nl=\"naar rechts\"\n        TurnRight,\n        //% block=\"30 deg to the left\"\n        //% block.loc.nl=\"30 gr naar links\"\n        RotateLeft,\n        //% block=\"30 deg to the right\"\n        //% block.loc.nl=\"30 gr naar rechts\"\n        RotateRight\n    }\n\n    let MOVEMENT: number = Message.Stop // the latest movement message\n\n    // Speed range:\n    // ------------\n    // Value: 0 to 100 (in %)\n    // Message: 1000 to 1100\n    let SPEED: number = 50\n\n    export enum Action {\n        //% block=\"pee\"\n        //% block.loc.nl=\"plassen\"\n        Pee\n    }\n\n    ///////////////////////////////\n    // MESSAGE HANDLING ROUTINES //\n    ///////////////////////////////\n\n    function stopMoving() {\n        let data = Math.map(0, -100, 100, 0, 255)\n        writeCommand(0x09, 0x30, data)  // move forward/backward\n        writeCommand(0x09, 0x32, data)  // turn left/right\n    }\n\n    function handleMessage() {\n\n        // Instead of 'Message.Wait', this message is submitted by\n        // the calculated value of '10000 + wait time'.\n        let wait = 0\n        if (MESSAGE >= 10000) {\n            wait = MESSAGE - 10000\n            MESSAGE = Message.Wait\n        }\n\n        // Instead of 'Message.Speed', this message is submitted by\n        // the calculated value of '1000 + required speed'.\n        if (MESSAGE >= 1000) {\n            SPEED = MESSAGE - 1000\n            // reactivate the latest movement message\n            MESSAGE = MOVEMENT\n        }\n\n        // The messages 'Message.FastWave', 'Message.NormalWave'\n        // and 'Message.SlowWave' only set the WAVE variable\n        // depending on the follower's position.\n        // Afterwards, WAVE is used to pause before the\n        // execution of the next message to create the wave effect.\n        // Message.Stop however is excluded from the wave behaviour.\n        if (WAVE > 0 && MESSAGE != Message.Stop) {\n            basic.pause(WAVE * 1000)\n            WAVE = 0\n        }\n\n        switch (MESSAGE) {\n            case Message.Stop:\n                stopMoving()\n                break\n            case Message.Wait:\n                basic.pause(wait * 1000)\n                break\n            case Message.FastWave:\n                WAVE = (POSITION - 1) * 0.3\n                break\n            case Message.NormalWave:\n                WAVE = (POSITION - 1) * 0.5\n                break\n            case Message.SlowWave:\n                WAVE = (POSITION - 1) * 1.0\n                break\n            //\n            // XGO MOVEMENT CONTROL\n            //\n            case Message.Forward:\n                MOVEMENT = Message.Forward\n                moveRider(Direction.Forward, SPEED)\n                break\n            case Message.Backward:\n                MOVEMENT = Message.Backward\n                moveRider(Direction.Backward, SPEED)\n                break\n            case Message.TurnLeft:\n                MOVEMENT = Message.Left\n                rotateRider(Direction.CounterClockwise, SPEED)\n                break\n            case Message.TurnRight:\n                MOVEMENT = Message.Right\n                rotateRider(Direction.Clockwise, SPEED)\n                break\n            case Message.TurnOff:\n                MOVEMENT = Message.TurnOff\n                rotateRider(Direction.Clockwise, 0)\n                break\n            case Message.SpeedUp:\n                SPEED += 10\n                if (SPEED > 100) SPEED = 100\n                // call handleMessage recursively to activate the speed\n                MESSAGE = MOVEMENT\n                handleMessage()\n                break\n            case Message.SlowDown:\n                SPEED -= 10\n                if (SPEED < 0) SPEED = 0\n                // call handleMessage recursively to activate the speed\n                MESSAGE = MOVEMENT\n                handleMessage()\n                break\n            //\n            // XGO STANDARD ACTIONS\n            //\n            case Message.Pee:\n                break\n        }\n        MESSAGE = -1\n    }\n\n    function showPosition(): void {\n        basic.showString(\"P\" + POSITION.toString())\n    }\n\n    input.onLogoEvent(TouchButtonEvent.Pressed, function () {\n        showPosition()\n    })\n\n    ////////////////////////\n    // PROGRAMMING BLOCKS //\n    ////////////////////////\n\n    //% block=\"position\"\n    //% block.loc.nl=\"positie\"\n    export function position(): number {\n        return POSITION\n    }\n\n    //% block=\"follow at %pos\"\n    //% block.loc.nl=\"volg op %pos\"\n    export function setPosition(pos: Position) {\n        POSITION = pos + 1\n    }\n\n    //% block=\"position %player\"\n    //% block.loc.nl=\"positie %player\"\n    export function isPosition(): number {\n        return POSITION\n    }\n\n    //% block=\"do a %wave wave\"\n    //% block.loc.nl=\"maak een %wave wave\"\n    export function setWave(wave: Wave) {\n        switch (wave) {\n            case Wave.Slow: MESSAGE = Message.SlowWave; break;\n            case Wave.Normal: MESSAGE = Message.NormalWave; break;\n            case Wave.Fast: MESSAGE = Message.FastWave; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"perform the %action\"\n    //% block.loc.nl=\"ga %action\"\n    export function performAction(action: Action) {\n        switch (action) {\n            case Action.Pee: MESSAGE = Message.Pee; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"turn %rotation\"\n    //% block.loc.nl=\"draai %rotation\"\n    export function turn(rotation: Rotation) {\n        switch (rotation) {\n            case Rotation.TurnLeft: MESSAGE = Message.TurnLeft; break;\n            case Rotation.TurnRight: MESSAGE = Message.TurnRight; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"walk %movement\"\n    //% block.loc.nl=\"loop %movement\"\n    export function move(movement: Movement) {\n        switch (movement) {\n            case Movement.Forward: MESSAGE = Message.Forward; break;\n            case Movement.Backward: MESSAGE = Message.Backward; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"set speed to %speed \\\\%\"\n    //% block.loc.nl=\"stel de snelheid in op %speed \\\\%\"\n    //% speed.min=0 speed.max=100 speed.defl=50\n    export function setSpeed(speed: number) {\n        MESSAGE = 1000 + speed;\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"stop\"\n    //% block.loc.nl=\"stop\"\n    export function stop() {\n        MESSAGE = Message.Stop\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"a number from %min upto %max\"\n    //% block.loc.nl=\"een getal van %min t/m %max\"\n    //% max.defl=10\n    export function randomInt(min: number, max: number): number {\n        let i = 0\n        if (min > max) {\n            i = min\n            min = max\n            max = i\n        }\n        i = max - min + 1\n        i = min + Math.floor(Math.random() * i)\n        return i\n    }\n\n    //% block=\"wait %time sec\"\n    //% block.loc.nl=\"wacht %time sec\"\n    //% min.defl=1\n    export function wait(time: number) {\n        MESSAGE = 10000 + time\n        if (!PAUSE) handleMessage()\n    }\n\n    //% color=\"#008800\"\n    //% block=\"comment: %dummy\"\n    //% block.loc.nl=\"uitleg: %dummy\"\n    //% min.defl=\"schrijf hier je uitleg\"\n    export function comment(dummy: string) {\n    }\n\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-xgorider\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1737240379777}